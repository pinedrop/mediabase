<?php

/**
* This module provides general customizations for the Mediabase Drupal application
*/

function mediabase_init() {
   $path = drupal_get_path('module', 'mediabase');
   drupal_add_css(drupal_get_path('module', 'mediabase') . '/css/mediabase.css');
   drupal_add_js( array( 
        'mediabase' => array( 
          'path' => $path,
          'kmapServer' => variable_get('kmap_server', 'http://subjects.kmaps.virginia.edu') . '/',
          'placeServer' => variable_get('place_server', 'http://places.kmaps.virginia.edu') . '/',
        )), 'setting' ); 
}

function mediabase_permission() {
  return array(
    'administer mediabase' => array(
      'title' => t('Administer Mediabase'), 
      'description' => t('Perform administration tasks for mediabase.'),
    ),
  );   
}

function mediabase_menu() {
   $items = array();
   
   $items['admin/config/media/mediabase'] = array(
   'title' => 'Mediabase Settings',
   'description' => 'Settings for Mediabase',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('mediabase_settings_form'),
   'access arguments' => array('administer mediabase'),
   'type' => MENU_NORMAL_ITEM,
   );
   
   $items['browse/media'] = array(
   'title' => 'Browse Mediabase Content',
   'description' => 'Settings for Mediabase',
   'file' => 'includes/mediabase.browse.inc',
   'page callback' => 'browse_media',
   'type' => MENU_NORMAL_ITEM,
   );
   
   $items['persistent/%'] = array(
    'title' => '',
    'description' => 'Redirects a NID to its titled url',
    'page callback' => 'mediabase_persistent_nid',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_NORMAL_ITEM,
   );
   
   return $items;
}

function mediabase_settings_form($form_id, $form_state) {
   $form['partner_data'] = array(
      '#type' => 'textarea',
      '#title' => t('Partner data prefix patterns'),
      '#description' => t('A list of pipe-delimited values (prefix | label | delimiter). Prefix is the prefix used in a Kaltura Batch Upload CSV in the partner data field, e.g. thl-3918.'),
      '#default_value'=> variable_get('mediabase_partner_data_prefixes'),
      '#rows' => 10,
   );
   
   if(user_access('administer knowledge maps')) {
     $form['kmap_server'] = array(
        '#title' => t('Kmap Server'),
        '#type' => 'textfield', 
        '#default_value' => variable_get('kmap_server', 'http://subjects.kmaps.virginia.edu'),
        '#size' => 60, 
        '#maxlength' => 255, 
        '#required' => TRUE,
     );
     $form['place_server'] = array(
        '#title' => t('Places Server'),
        '#type' => 'textfield', 
        '#default_value' => variable_get('place_server', 'http://places.kmaps.virginia.edu'),
        '#size' => 60, 
        '#maxlength' => 255, 
        '#required' => TRUE,
     );
   }
   
   return system_settings_form($form);
}

function mediabase_settings_form_validate($form, &$form_state) {
  if(substr($form_state['values']['kmap_server'], -1) == "/") {
    $form_state['values']['kmap_server'] = substr( $form_state['values']['kmap_server'], 0, strlen($form_state['values']['kmap_server']) - 1);
  }
  if(substr($form_state['values']['place_server'], -1) == "/") {
    $form_state['values']['place_server'] = substr( $form_state['values']['place_server'], 0, strlen($form_state['values']['place_server']) - 1);
  }
}

function mediabase_settings_form_submit($form, &$form_state) {
   // partner data prefixes are a way of managing imports from kaltura
   variable_set('mediabase_partner_data_prefixes', $form_state['values']['partner_data']);
   drupal_set_message(t('The settings have been saved'));
}

function mediabase_form_alter(&$form, &$form_state, $form_id) {
   if (in_array($form_id, array('search_block_form', 'apachesolr_search_custom_page_search_form'))) {
      drupal_add_js(drupal_get_path('module', 'mediabase') .'/js/mediabase.js', array('preprocess' => FALSE));
   }  
   if ( isset($form['#node_edit_form']) && $form['#node_edit_form']) {
      $form['actions']['Cancel'] = array(
         '#access' => 'TRUE',
         '#type' => 'submit',
         '#value' => 'Cancel',
         '#weight' => '14',
         '#submit' => array('mediabase_node_form_cancel'),
         );
   }
}

function mediabase_node_form_cancel(&$form, &$form_state) {
   $node = $form['#node'];
   $alias = drupal_lookup_path('alias', "node/$node->nid");
   drupal_goto($alias);
}

function mediabase_persistent_nid($nid) {
   $alias = drupal_lookup_path('alias', "node/$nid");
   drupal_goto($alias);
}
/**
 * THEMING FUNCTIONS
 */
 
/**
 * Implements hook_theme_registry_alter()
 *    Taken from http://www.metachunk.com/blog/adding-module-path-drupal-7-theme-registry
 *    Adds mediabase/templates folder to theme paths
**/
function mediabase_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'mediabase');
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'shanti-sarvaka', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _mediabase_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 *    See mediabase_theme_registry_alter above for source.
*/
function _mediabase_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 *   Implements hook_preprocess_node to add url for transcript
 */
function mediabase_preprocess_node(&$variables) {
  $variables['transcript_url'] = 'node/' . $variables['node']->nid . '/transcript';
}

/**
 * Implements hook_node_load adds fields to video and audio node info for api services and other things
 * Fields added: thumbnail Url, duration[seconds, format]
 */
function mediabase_node_load($nodes, $types) {
  if(in_array('audio', $types) || in_array('video', $types)) {
    module_load_include('inc', 'mb_kaltura', 'mb_kaltura');
    foreach($nodes as $node) {
      if(in_array($node->type, array('audio', 'video'))) {
        $eid = _get_entry_id_from_node($node);
        if($eid) { 
          $media = _get_media_from_entry_id($eid);
          // Add thumnail URL
          $thumburl = mb_kaltura_get_thumbnail_url($eid);
          $node->thumbnail_url = $thumburl;
          // Add duration
          // Duration array consists of seconds (int) and formatted (str)
          $node->duration = array(
            'seconds' => $media->duration,
            'formatted' => mediabase_format_duration($media->duration),
          );
        } else {
          //dpm(array($types, $node), 'no eid in kaltura');
          $node->thumbnail_url = '';
          $node->duration = array('seconds' =>'', 'formatted' => '');
          watchdog('mediabase', 'No kaltura video found for node %nid', array('%nid' => $node->nid), WATCHDOG_WARNING);
        }
      }
    }
  // If collection or team, add an array of all children media node ids
  } else if(in_array('collection', $types) || in_array('team', $types)) {
    foreach($nodes as $node) {
      if(in_array($node->type, array('collection', 'team'))) {
        $node->child_nodes = mb_structure_get_groups_nodes($node->nid);
      }
    }
  }
} 

/**
 * Function to format duration
 */
function mediabase_format_duration($secs = 0) {
  // TODO: Check I18N documentation for time strings to makes sure this is right below
  $mins = 0;
  if($secs > 60) {
    $mins = floor($secs/60);
    $secs = $secs % 60;
  }
  $hrs = 0;
  if($mins > 60) {
    $hrs = floor($mins/60);
    $mins = $mins % 60;
  }
  $durstr = ($hrs > 0) ? $hrs . t(" hr ") : "";
  if($mins > 0) {
    $durstr .= $mins . t(" min ");
  }
  if($secs > 0) {
    $durstr .= $secs . t(" sec");
  }
  return $durstr;
}
