<?php
/*
function mb_solr_init() {
  drupal_add_js(drupal_get_path('module', 'kmap_taxonomy') . '/js/lib/jstree/jquery.jstree.js', array('preprocess' => FALSE));
}
*/

/**
* Implementation of hook_apachesolr_index_document_build
* Add collection parent gids of a team
**/
function mb_solr_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  dpm("in document build");
   if ( ! in_array($entity->type, array('video','audio'))) {
      return;
   }
   $parent_group_gid = !empty($entity->group_audience['und']) ? $entity->group_audience['und'][0]['gid'] : null;
   if (!empty($parent_group_gid)) {
      $gids=array($parent_group_gid);
      $parent_group = og_get_group('group',$parent_group_gid);
      $group_node = node_load($parent_group->etid);
      if ($group_node->type == 'team') { 
         $coll_ancestor_node = get_collection_ancestor_node($group_node);
         $ancestor_group = og_get_group('node',$coll_ancestor_node->nid);
         $gids[] = $ancestor_group->gid;
      }
      foreach ($gids as $gid) {
         $document->addField('im_collection_gid', $gid);
      }
   }
}
/*
function mb_solr_apachesolr_search_page_alter(array &$build, array $search_page) {
  //dpm($build, 'build in search page alter');
  //dpm($search_page, 'search page in alter');
}

function mb_solr_apachesolr_query_prepare($query) {
  //dpm($query, 'here');
}
*/
/*
 * mb_solr_apachesolr_query_alter():
 * 
 *    Implements hook_apachesolr_query_alter
 *    adds collection GIDs to solr Queries when there is a im_collection_gid filter that is defined in the search page for the new collection page
 *    see:  /admin/config/search/apachesolr/search-pages/collection_home/edit
 * 
 *    Also adds a random sort filter as described by http://realize.be/random-results-apache-solr-and-drupal
 * 
 */
 
function mb_solr_apachesolr_query_alter($query) {
  // Collection id (gid) filter
   $gid_filters = $query->getFilters('im_collection_gid');
   foreach ($gid_filters as $idx => $gid_filter) {
        $value = $gid_filter['#value'];
        if (is_numeric($value) ) { // we've likely got a gid as the value already
           continue;
        }
        // we've likely got an alias as the filter value
        $alias_path = "collection/$value";
        $node_path = drupal_lookup_path('source', $alias_path);
        if ( empty($node_path) ) {
           continue;
        }
        $nid = array_pop( explode('/', $node_path));
        $group = og_get_group('node', $nid);
        $query->removeFilter('im_collection_gid', $value);
        $query->addFilter('im_collection_gid', $group->gid);
   }
   
   $gid_filters = $query->getFilters('im_collection_gid');
   
   
   // Random Sort filter

   $seed = rand(0, 999999);
   $field_name = "random_$seed";
   $order = (rand(0, 1) == 0) ? 'asc' : 'desc';
   $sorts = array($field_name => array('title' => 'Random', 'default' => $order));
   // Need to figure this out!!
   //dpm($sorts, 'sorts');
   //dpm($query, 'all new');  
}

/**
*   mb_solr_apachesolr_process_results():
* 
*     Implementation of hook_apachesolr_process_results
*     Add thumbnail url to the result items
**/
function mb_solr_apachesolr_process_results(&$results, DrupalSolrQueryInterface $query) {
dpm($query->getSolrParams(), 'in process results');
return;
   foreach ( $results as $idx => $item ) {
      $bundle = $item['bundle'];
      $media_field_table = "field_data_field_$bundle";
      $entryid_column = "field_$bundle" . "_entryid";
      $entity_id = $item['fields']['entity_id'];
      
      if ('video' == $bundle) {
         $query = "SELECT kaltura_thumbnail_url
         FROM {field_data_field_video} 
         JOIN {node_kaltura} ON field_video_entryid = kaltura_entryid
         WHERE entity_id = :etid";
      }
      else if ('audio' == $bundle) {
         $query = "SELECT kaltura_thumbnail_url
         FROM {field_data_field_audio} 
         JOIN {node_kaltura} ON field_audio_entryid = kaltura_entryid
         WHERE entity_id = :etid";
      }
      
      $res = db_query($query, array(':etid' => $entity_id) );
      $thumb_url = array_shift($res->fetchCol());
      $results[$idx]['thumb_url'] = $thumb_url;
   }
}

/**
* Implements hook_theme().
*/

function mb_solr_theme($existing) {
   return array(
     'search_results__apachesolr_search__collection_home' => array(
         'variables' => array('search_results' => NULL, 'module' => array()),
         ),
      /*'search_result__apachesolr_search__node__video' => array(
         'variables' => array('search_result' => NULL, 'module' => array()),
         ),
      'search_result__apachesolr_search__node__audio' => array(
         'variables' => array('search_result' => NULL, 'module' => array()),
         ),*/
     );
}

/**
 * Search results theming function just creates mark up for items in the collect
 * This is included in the node display through mb_solr_node_view (below).
 */
function theme_search_results__apachesolr_search__collection_home(&$vars) {
  /*$collpath = str_replace('collhome','collection', current_path());
  $collid = array_pop(explode('/', drupal_lookup_path('source',$collpath)));
  $collnode = node_load($collid);
  $body = $collnode->body['und'][0]['safe_value'];
  $output = '<div>' . $body . '</div>';
  $subcolls = array();*/
  $output = '';
  foreach ($vars['results'] as $k => $v) {
    $output .=  mb_solr_make_teaser($v);
  }
  
  //drupal_set_title($collnode->title);
  return $output;
}

/**
 *  Function called by theming function above to create the markup for a a/v "teaser" in the standard Mediabase model from the home page.
 *    (Note: check to see how the home page creates its teasers for a function that might return the bulk of the markup)
 */
function mb_solr_make_teaser($v) {
  return '
  <div class="views-row views-row-3 views-row-odd grid-9 mb-thumbnail-grid-row">
    <div class="views-field views-field-field-audio">       
      <div class="field-content"></div>  
    </div>  
    <div class="views-field views-field-field-video">        
      <div class="field-content"><a href="' . $v['link'] . '" 
        class="views-ajax-processed-processed"><span class="play-icon-overlay"></span>
        <div class="kaltura"><div class="kaltura-thumb"><img title="Where Did You Go?: The Chapter 07 Dialog from" alt="" 
          src="' . $v['thumb_url'] . '" 
          typeof="foaf:Image" class="k-no-rotate"></div></div></a></div>  </div>  
        <div class="views-field views-field-title">        
          <span class="field-content"><a href="' . $v['link'] . '" 
            class="views-ajax-processed-processed">' . $v['title'] . '</a></span>  </div>  
          <div class="views-field views-field-created">    <span class="views-label views-label-created">Posted</span>    
            <span class="field-content">' . date('M jS, Y', $v['fields']['created']) . '</span>  </div>  
          <div class="views-field views-field-group-audience">    <span class="views-label views-label-group-audience">in </span>    
          <div class="field-content"><a href="/collection/tibetan-and-himalayan-library" 
            class="views-ajax-processed-processed">Tibetan and Himalayan Library </a></div>  
    </div>  
  </div>';
}

/**
 * Implements hook_node_view:
 *    Call the search page to get the list of a collections a/v items and adds these to the node's display.
 *    Because they come from the search page, these results are linked to the subcollection facet block which is made to appear on the node page through the block admin interface.
 *    Thus, when a facet is chosen, it filters the results on the collections home page
 * 
 *  NOTE: the path 'collection/%' is set by the Path module's URL Alias setting on the configuration page
 */

function mb_solr_node_view($node, $view_mode, $langcode) {
  if($node->type == 'collection') {
    $alias = str_replace('collection/', '', drupal_get_path_alias(current_path()));
    module_load_include('inc','apachesolr','apachesolr_search.pages');
    $search_page = apachesolr_search_custom_page('collection_home','', $alias);
    $node->content['collcontent'] = array( 
      '#markup' => '<div id="mb-solr-collection-content" class="block-inner clearfix">' . 
        '<h2 class="block-title">Media in ' . $node->title . '</h2>' . 
        '<div id="mb_solr_items" class="content clearfix">' . drupal_render($search_page['search_results']) . '</div></div>',
      '#weight' => 45,  // set high weight so it appears after the body's description
    );
  }
}
  
/*
 *  Implements hook_facetapi_widget: 
 *     Creates a widget option in the facet display page called 'Mediabase Select Tree' that calls the MBSolrFacetapiWidgetMbSolrTree class
 */
function mb_solr_facetapi_widgets() {
  return array(
    'mb_solr_facet_tree' => array(
      'handler' => array(
        'label' => t('Mediabase Select Tree'),
        'class' => 'MbSolrFacetapiWidgetMbSolrTree',
        'query types' => array('term', 'date'),
      ),
    ),
  );
}

/*
 * MbSolrFacetapiWidgetMbSolrTree: This extends the FacetapiWidgetLinks class found in the facetapi module
 *    It only makes two changes to the execute() and buildListItems() function, changing the path to the current path of the collection.
 */
class MbSolrFacetapiWidgetMbSolrTree extends FacetapiWidgetLinks {
   /**
    * Modifies the standard facet tree by changing the path from the standard search path to the collection or current path
    */
  public function execute() {
    $elements = &$this->build[$this->facet['field alias']];
    foreach($elements as $n => &$element) {
      $element['#path'] = current_path();
    }
    //dpm($elements, 'elements');
    // Sets each item's theme hook, builds item list.
    $this->setThemeHooks($elements);
    $items = $this->buildListItems($elements);
    $elements = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => $this->build['#attributes'],
    );
  }
  
  function buildListItems($build) {
    $settings = $this->settings->settings;
    
    // Initializes links attributes, adds rel="nofollow" if configured.
    $attributes = ($settings['nofollow']) ? array('rel' => 'nofollow') : array();
    $attributes += array('class' => $this->getItemClasses());

    // Builds rows.
    $items = array();
    foreach ($build as $value => $item) {
      $row = array('class' => array());
      // Initializes variables passed to theme hook.
      $variables = array(
        'text' => $item['#markup'],
        'path' => current_path(),
        'count' => $item['#count'],
        'options' => array(
          'attributes' => $attributes,
          'html' => $item['#html'],
          'query' => $item['#query'],
        ),
      );

      // Adds the facetapi-zero-results class to items that have no results.
      if (!$item['#count']) {
        $variables['options']['attributes']['class'][] = 'facetapi-zero-results';
      }

      // Add an ID to identify this link.
      $variables['options']['attributes']['id'] = drupal_html_id('facetapi-link');

      // If the item has no children, it is a leaf.
      if (empty($item['#item_children'])) {
        $row['class'][] = 'leaf';
      }
      else {
        // If the item is active or the "show_expanded" setting is selected,
        // show this item as expanded so we see its children.
        if ($item['#active'] || !empty($settings['show_expanded'])) {
          $row['class'][] = 'expanded';
          $row['children'] = $this->buildListItems($item['#item_children']);
        }
        else {
          $row['class'][] = 'collapsed';
        }
      }

      // Gets theme hook, adds last minute classes.
      $class = ($item['#active']) ? 'facetapi-active' : 'facetapi-inactive';
      $variables['options']['attributes']['class'][] = $class;

      // Themes the link, adds row to items.
      $row['data'] = theme($item['#theme'], $variables);
      $items[] = $row;
    }
    return $items;
  }
}

function mb_solr_facetapi_empty_behaviors() {
  return array(
    'name' => array(
      'handler' => array(
        'label' => t('Show the facet name'),
        'class' => 'MbSolrFacetapiEmptyBehaviorName',
      ),
    ),
  );
}


/**
 * Empty behavior plugin that returns an empty array.
 *
 * This is the default behavior for empty facets. Returning an empty array will
 * prevent the facet from being displayed if it contains no items. For example,
 * if facets are displayed as blocks, the empty array will prevent the block
 * from rendering.
 */
class MbSolrFacetapiEmptyBehaviorName extends FacetapiEmptyBehavior {

  /**
   * Implements FacetapiEmptyBehavior::execute().
   */
  public function execute() {
    return array('empty');
  }
}


