<?php
// $Id:$
/**
* @file
* This module is an interface between Kaltura Entries and PBCore Fields.
* 
* It autopopulates some pbcore fields
* It saves pbcore metadata to Kaltura
* It creates Mediabase node types (video,audio, image) when importing entries from Kaltura
*
* THE PBCORE FIELDS
* PbCoreIdentifier
* PbCoreTitle
* PBCoreSubject
* PBCoreDescription
* PBCoreGenre
* PBCoreRelation
* PBCoreCoverage
* PBCoreCreator
* PBCoreInstantiations
*    -PBCoreDateAvailable
*    -PBCoreFormatID
*    -PBCoreAnnotation
* PBCoreExtension        
*/

define("METADATA_PROFILE_ID", 2631);
define("METADATA_OBJECT_TYPE", 1);
define("MB_MAIN_PLAYER_ID", 24762821);

function mb_kaltura_init() {
   drupal_add_js(drupal_get_path('module', 'mb_kaltura') . '/js/mb-kaltura.js');
}

function mb_kaltura_menu() {
   $items = array();
   $items['xml/pbcore/%'] = array(
      'title' => 'PBCore XML',
      'description' => 'Modify items in PBCore elements are enabled.',
      'page callback' => 'xml_pbcore',
      'page arguments' => array(2),
      'access arguments' => array('access content'), 
      'type' => MENU_CALLBACK,
      'file' => 'mb_kaltura.inc',
      );
   $items['mb_kaltura/autocomplete/collection'] = array(
      'title' => 'Ahah callback',
      'access arguments' => array('access content'),
      'page callback'    => 'mb_kaltura_autocomplete_collection',
      'type' => MENU_CALLBACK,
      'file' => 'mb_kaltura.inc',
      );
   $items['mb_kaltura/autocomplete/user'] = array(
      'title' => 'Ahah callback',
      'access arguments' => array('access content'),
      'page callback' => 'mb_kaltura_autocomplete_user',
      'type' => MENU_CALLBACK,
      'file' => 'mb_kaltura.inc',
      );
   $items['mb_kaltura/upload-keepalive'] = array(
      'title' => 'A Keep-alive callback to be called by js during long uploads',
      'page callback' => 'mb_upload_keepalive',
      'access arguments' => array('access content'),
      'file' => 'mb_kaltura.inc',
      'type' => MENU_CALLBACK
      );
   return $items;
}

function mb_kaltura_menu_alter(&$items) {
   //This alter overrides the menu item of same path defined in kaltura.module.
   //Their import mechanism is broken so we re-do it here since we need extra behaviour anyway.
   $items['admin/config/media/kaltura/import']['title'] =  'Import Kaltura Items';
   $items['admin/config/media/kaltura/import']['page callback'] =  'drupal_get_form';
   $items['admin/config/media/kaltura/import']['page arguments'] =   array('mb_kaltura_import_form');
   $items['admin/config/media/kaltura/import']['access arguments'] =  array('administer mediabase');
   $items['admin/config/media/kaltura/import']['file'] =  'mb_kaltura.inc';
   $items['admin/config/media/kaltura/import']['module'] =  'mb_kaltura';
    
   // This is a copy of  admin/settings/kaltura/entries/import  to go in the content menu
   $items['admin/content/mediabase/import'] = $items['admin/config/media/kaltura/import'];
   $items['admin/content/mediabase/import']['type'] =   MENU_LOCAL_TASK;
}


function mb_kaltura_node_presave($node) {
   module_load_include('inc', 'mb_kaltura', 'mb_kaltura');
   $kaltura_node_types = array('video', 'audio');
	 
	 if($node->type == 'audio') {
	 		// For audio files test for thumbnail or assign default
			_mb_kaltura_add_audio_thumb($node);
	 }
   if ( in_array( $node->type , $kaltura_node_types) )  {
      // _write_to_node_kaltura($node); // No longer needed after upgrade to Kaltura Module version 3.1 (ndg, 2015-10-27)
      //autopopulate_pbcore_identifier($node);
      //autopopulate_pbcore_title($node);
      //autopopulate_pbcore_instantiation($node);
   }
}

/**
 * Imports thumbnail image into Kaltura. Called from hook_node_presave to test if thumbnail has been changed.
 */
function _mb_kaltura_add_audio_thumb($node) {
	$kaltura_helpers = new KalturaHelpers();
	$kclient = $kaltura_helpers->getKalturaClient($isAdmin=TRUE);
	$lang = field_language('node', $node, 'field_thumbnail_image');
	$keid = $node->field_audio[$lang][0]['entryid'];
	// If there is no original thumbnail
	if (empty($node->original->field_thumbnail_image[LANGUAGE_NONE][0]['fid'])) {
		// But a custom thumbnail was uploaded
		if (!empty($node->field_thumbnail_image[$lang][0]['fid'])) {
			$fid = $node->field_thumbnail_image[$lang][0]['fid'];
			$file = file_load($fid);
			$url = file_create_url($file->uri);
			$kclient->media->updateThumbnailFromUrl($keid, $url);
		} else {
			// No thumbnail uploaded use default image
			$url = file_create_url('public://avimages/generic-audio-thumb.jpg');
			$kclient->media->updateThumbnailFromUrl($keid, $url);
		}
	} else {
		// There was an original
		$ofid = $node->original->field_thumbnail_image[$lang][0]['fid'];
		// Check if new thumb value
		if(!empty($node->field_thumbnail_image[$lang][0]['fid'])) {
			$nfid = $node->field_thumbnail_image[$lang][0]['fid'];
			// else update thumbnail with new one.
			$file = file_load($nfid);
			$url = file_create_url($file->uri);
			$kclient->media->updateThumbnailFromUrl($keid, $url);
		} else {
			// No thumbnail uploaded use default image
			$url = file_create_url('public://avimages/generic-audio-thumb.jpg');
			$kclient->media->updateThumbnailFromUrl($keid, $url);
		}
	}
}

function mb_kaltura_form_alter(&$form, &$form_state, $form_id){
   drupal_add_js(drupal_get_path('module', 'mb_kaltura') . '/js/keepalive.js');
   
   switch ($form_id) {
       case 'node_delete_confirm':
          $node = node_load($form['nid']['#value']);
          if ( in_array($node->type, array( 'video', 'audio'))) {
             $newform = array();
             $newform['delete_from_kaltura'] = array( 
                '#type'=>'checkbox',
                '#title' => t('Delete Kaltura version also.'),
                );
             // add the option before the buttons
             $pos = array_search('nid', array_keys($form));
             $form = array_merge(array_slice($form, 0, $pos), $newform, array_slice($form, $pos));
             array_unshift($form['#submit'], 'check_delete_from_kaltura');
          }
          break;
      
      case 'video_node_form':
          $form['field_video']['und'][0]['settings']['#type'] = 'hidden'; // Hide the custom settings for each display format
          //dpm($form, 'video form');
          break;
      
      case 'audio_node_form':
         $field_name = "field_" . $form['type']['#value'];
         if (isset($form[$field_name][LANGUAGE_NONE])) {
            unset( $form[$field_name][LANGUAGE_NONE][0]['meta_edit']); // Remove the Edit Metadata link completely
            if (!empty($form[$field_name][LANGUAGE_NONE][0]['entryid']['#default_value'])) { 
               // hide the add media button if media exists already.
               // see the js file for logic that un-hides it if media is removed.
               $button = &$form[$field_name][LANGUAGE_NONE][0]['button'];
               $button['#markup'] = str_replace("a href", "a class='hidden' href", $button['#markup']);
            }                                                       
         }
         break;
    } 
}

/**
*  check recent media nodes 
*  compare how many instantiations we are expecting (per type)
*  check for timeouts somehow
*  probably we can fetch the flavor profile for expected flavor sets
*/
function mb_kaltura_cron() {
}

function mb_kaltura_field_formatter_info() {
   return array(
      'field_kaltura_player_html5_video' => array(
         'label' => t('Raw Video Tag for Html5 Video'),
         'field types' => array('field_kaltura_entryid'),
         'setting' => array(
            ),
         ),
      'field_kaltura_player_html5_audio' => array(
         'label' => t('Raw Audio Tag for Html5 Audio'),
         'field types' => array('field_kaltura_entryid'),
         'setting' => array(
            ),
         ),
      );
}

/**
 * Makes the get media from entry id function accessible sitewide without needing the include file
 *    ndg8f, @014-06-18
 */
function mb_kaltura_get_media_info($kid = NULL) {
  if($kid) {
    module_load_include('inc', 'mb_kaltura', 'mb_kaltura');
    return _get_media_from_entry_id($kid);
  }
  return FALSE;
}

function mb_kaltura_transcripts_ui_js_alter(&$scripts) {
	$scripts['ui'] = drupal_get_path('module', 'mb_kaltura') . '/js/transcripts_ui.js';
}

function mb_kaltura_theme() {
   return array(
      'kaltura_player_html5_video' => array(
         'variables' => array(),
         //'file' => 'mb_kaltura.theme.inc',
         ),
      'kaltura_player_html5_audio' => array(
         'variables' => array(),
         ),
      'mb_kaltura_entry_table' => array(
         'render element' => 'element',
      ),
      'mb_kaltura_entry_table_pager' => array(
         'render element' => 'element',
      ),
         /*
      'mb_kaltura_import_form' => array(
         'function' => 'theme_mb_kaltura_import_form',
         'file' => 'mb_kaltura.inc',
         ),*/
      );
}

function mb_kaltura_video_tag($entry_id) {
   if ( empty($entry_id) ) {
      return;
   }
   $kalturaHelpers = new KalturaHelpers();
   $client=$kalturaHelpers->getKalturaClient($isAdmin=TRUE);
   try {
      $flavors=$client->flavorAsset->getByEntryId($entry_id);
   }
   catch (Exception $e) {
      watchdog('mb_kaltura', t('Kaltura Exception: %message, backtrace: <pre>!trace</pre>'), array('%message' => $e->getMessage(), '!trace' => $e->getTrace()));
      $msg = t("Had trouble retrieving flavors for Kaltura entry $entry_id.");
      $msg .= sprintf( "%s: %s %s <br/> %s %s", get_class($e), $e->getMessage(), $e->getCode(), $e->getFile(), $e->getLine());
      drupal_set_message( $msg, "error" );
   }
   
   $html5_sources = array();
   foreach ($flavors as $flavor) {
		  if(($flavor->isWeb || in_array( $flavor->fileExt, array('webm', 'ogg'))) && $flavor->bitrate > 0) {
        $location = $client->flavorAsset->getDownloadUrl($flavor->id);
        $html5_sources[] = (object)array(
            'type' => $flavor->fileExt,
            'src' => $location,
            'width' => $flavor->width,
            'height' => $flavor->height,
        );
		  }
      /*
        if ( !($flavor->status == KalturaFlavorAssetStatus::READY) || $flavor->isOriginal ) {
           continue;
        }
        if ( in_array( $flavor->fileExt, array('webm', 'mp4', 'ogg') ) ) {
         	if ( $flavor->fileExt == 'mp4' 
         		&& ( !in_array( 'h264', explode(",",$flavor->tags) ) ) ) {
                 //|| $flavor->bitrate < 600 ) ) {
         					continue;
                 }
       **/
   }
   return theme('kaltura_player_html5_video', array('html5_sources' => $html5_sources));
}

function mb_kaltura_audio_tag($entry_id) {
   if ( empty($entry_id) ) {
      return;
   }

   $client=KalturaHelpers::getKalturaClient($isAdmin=TRUE);
   try {
      $flavors=$client->flavorAsset->getByEntryId($entry_id);
   }
   catch (Exception $e) {
      watchdog('mb_kaltura', t('Kaltura Exception: %message, backtrace: <pre>!trace</pre>'), array('%message' => $e->getMessage(), '!trace' => $e->getTrace()));
      $msg = t("Had trouble retrieving flavors for Kaltura entry $entry_id.");
      $msg .= sprintf( "%s: %s %s <br/> %s %s", get_class($e), $e->getMessage(), $e->getCode(), $e->getFile(), $e->getLine());
      drupal_set_message( $msg, "error" );
   }
   
      $html5_sources = array();
   foreach ($flavors as $flavor) {
      if ( !($flavor->status == KalturaFlavorAssetStatus::READY) || $flavor->isOriginal ) {
         continue;
      }
		
      if ( in_array( $flavor->fileExt, array('mp3', 'mp4', 'ogg') ) ) {
         $location = $client->flavorAsset->getDownloadUrl($flavor->id);
         $html5_sources[] = (object)array(
            'type' => $flavor->fileExt,
            'src' => $location,
            );
         
      }
   }
   return theme('kaltura_player_html5_audio', array('html5_sources' => $html5_sources));
}

function mb_kaltura_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
   $element = array();
   $settings = $field['settings'];
   $entry_id = $items[0]['entryid'];
   $type = !empty($items[0]['mediatype']) ? $items[0]['mediatype'] : $query['kaltura_media_type'];
   
   switch ($display['type']) {
   case 'field_kaltura_player_html5_video':
      $element[0]['#markup'] = mb_kaltura_video_tag($entry_id);
      break;
   case 'field_kaltura_player_html5_audio':
      $element[0]['#markup'] = mb_kaltura_audio_tag($entry_id);
      break;
   }
   return $element;
}

function theme_mb_kaltura_entry_table($vars) {
//    dpm($vars, 'vars in thme');
    $element = $vars['element'];
    $header = array(  t('Thumbnail'), t('Entry Id'), t('Title'), t('Type'), t('Date Created'));
    array_unshift($header, array('class' => array('select-all'))); // Add select all checkbox and enabling javascript
    array_unshift($header, '#');
    drupal_add_js('misc/tableselect.js');
    $rows = array();
    $n = $element['#start_number'];
    foreach (element_children($element) as $key) {
        $rows[] = array(
            array('data' => "{$n}."),
            array('data' => render($element[$key]['c_check'])),
            array('data' => render($element[$key]['c_thumb'])),
            array('data' => render($element[$key]['c_eid'])),
            array('data' => render($element[$key]['c_title'])),
            array('data' => render($element[$key]['c_type'])),
            array('data' => render($element[$key]['c_created'])),
        );
        $n++;
    }
    $page = theme('table', array('header' => $header, 'rows' => $rows));
    return $page;
}

function theme_mb_kaltura_entry_table_pager($vars) {
    //dpm($vars, 'vars in pager thme');
    $element = $vars['element'];
    $pn = $element['#current_page'];
    $np = $pn + 1;
    $pp = $pn - 1;
    $total = $element['#total_items'];
    $rws = $element['#items_per_page'];
    $pgtotal = floor($total / $rws);
    $path = current_path();
    $firsturl = url($path , array('query' => array('rn' => $rws, 'pg' =>1)));
    $prevurl =  url($path , array('query' => array('rn' => $rws, 'pg' =>$pp)));
    $nexturl = url($path , array('query' => array('rn' => $rws, 'pg' =>$np)));
    $lasturl = url($path , array('query' => array('rn' => $rws, 'pg' =>$pgtotal)));
    $output = '<div class="mb-kaltura-entry-pager">';
    $output .= '<div class="firstdiv"><a href="' . $firsturl . '" title="first page">|<</a> </div>';
    $output .= '<div class="prevdiv"><a href="' . $prevurl . '" title="previous page"><</a> </div>';
    $output .= '<div class="pagediv">Page <input type="text" class="pagenum form-text" size="5" value="' . $pn . '" /> of ' . $pgtotal . '</div>';
    $output .= '<div class="nextdiv"><a href="' . $nexturl . '" title="next page">></a></div>';
    $output .= '<div class="lastdiv"><a href="' . $lasturl . '" title="last page">>|</a></div></div>';
    return $output;
}

function theme_kaltura_player_html5_video($vars) {
   $out = '<div class="kaltura">';
   $out .= '<div class="kaltura-html5-video">
   <video controls="controls">';
   foreach ($vars['html5_sources'] as $src) {
      $out .= "<source type='video/$src->type' src='$src->src' width='$src->width' height='$src->height' />";      
   }
   $out .= '</video>
   </div>';
   $out .= '</div>';
   return $out;
}

function theme_kaltura_player_html5_audio($vars) {
   $out = '<div class="kaltura">';
   $out .= '<div class="kaltura-html5-audio">
   <audio controls="controls">';
   foreach ($vars['html5_sources'] as $src) {
      $out .= "<source type='audio/$src->type' src='$src->src'  />";      
   }
   $out .= '</audio>
   </div>';
   $out .= '</div>';
   return $out;
}

/**
 * Function to retrieve thumbnail URL from Kaltura
 *   entry_id : kaltura entry id 
 *   width & height : are numeric
 **/
function mb_kaltura_get_thumbnail_url($entry_id, $width=190, $height=220, $resave=FALSE, $ctype="video") { // was $height 105 but defaults to lowest parameter.
	$kalturaHelpers = new KalturaHelpers();
    // create generic thumb url
    $mbpath = drupal_get_path('module', 'mediabase');
    $genericthumb = url($mbpath, array('absolute' => true)) . '/images/generic-video-thumb.jpg';
    // if no entry_id is given, it's a node record without an attached kaltura a/v so return generic thumb
    if ($entry_id == '' || strlen($entry_id) == 0) {
        return $genericthumb;
    }
    // Otherwise get Katlura thumb and adjust type in URL
	$thumburl = $kalturaHelpers->getThumbnailUrl(NULL, $entry_id, $width, $height);
	$thumburl = str_replace('type/2','type/1', $thumburl);
	$thumburl = str_replace('/bgcolor/000000','', $thumburl);
	
    // Make sure kaltura_thumb directory is in file structure or use default (Public)
    $directory = file_build_uri('kaltura_thumbs');
    if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) { $directory = "public://"; }
    
    // Create thumb filename based on entry_id
    $destination = $directory . "/{$entry_id}-thumb.png";
    
    // If thumbnail already there, return it's url
    if (file_exists($destination) && $resave === FALSE) {
        return file_create_url($destination);
    } else {
        $headers = get_headers($thumburl); // Make sure Kaltura thumb is there to avoid warning
        if (strpos($headers[0], '200')) {
            // Otherwise, get the kaltura thumbnail and save locally if doesn't already exist
            $file = system_retrieve_file($thumburl, $destination, TRUE);
            if ($file !== false) {
                // Return the local url for the thumb image
                $thumburl = file_create_url($file->uri);
            } else {
                // Or else there was a problem.
                watchdog("mb_kaltura", "Could not save thumb image file for entry id: " . $entry_id);
               $thumburl = $genericthumb;
            }
        } else {
            // Can't get Kaltura thumb
            $thumburl = $genericthumb;
        }
	   return $thumburl;
    }
}


/*
===============
SUBMIT HANDLERS
===============
*/
function check_delete_from_kaltura(&$form, &$form_state) {
   if ( $form_state['values']['delete_from_kaltura'] == 1 ) {
      module_load_include('inc', 'mb_kaltura', 'mb_kaltura');
      $kalturaHelpers = new KalturaHelpers();
      $nid = $form_state['values']['nid'];
      $node = node_load($nid);
      $client=$kalturaHelpers->getKalturaClient($isAdmin=TRUE);
      $objectId= _get_entry_id_from_node($node);
      $objectId = str_replace(",","",$objectId);
      $msg = '';
      try {
        $client->media->delete($objectId);
        $msg = t("Deleted entry_id, @entryid from Kaltura server", array('@entryid' => $objectId));
      } catch(Exception $e) {
        $msg = t("Unable to delete entry @entryid, as it was not found on the Kaltura server", array('@entryid' => $objectId));
      }
      drupal_set_message( $msg ); 
   }
}

