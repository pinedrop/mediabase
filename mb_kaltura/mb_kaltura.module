<?php
// $Id:$
/**
* @file
* This module is an interface between Kaltura Entries and PBCore Fields.
* 
* It autopopulates some pbcore fields
* It saves pbcore metadata to Kaltura
* It creates Mediabase node types (video,audio, image) when importing entries from Kaltura
*
* THE PBCORE FIELDS
* PbCoreIdentifier
* PbCoreTitle
* PBCoreSubject
* PBCoreDescription
* PBCoreGenre
* PBCoreRelation
* PBCoreCoverage
* PBCoreCreator
* PBCoreInstantiations
*    -PBCoreDateAvailable
*    -PBCoreFormatID
*    -PBCoreAnnotation
* PBCoreExtension        
*/

define("METADATA_PROFILE_ID", 2631);
define("METADATA_OBJECT_TYPE", 1);

function mb_kaltura_init() {
   drupal_add_js(drupal_get_path('module', 'mb_kaltura') . '/js/mb-kaltura.js');
}

function mb_kaltura_menu() {
   $items = array();
   $items['xml/pbcore/%'] = array(
      'title' => 'PBCore XML',
      'description' => 'Modify items in PBCore elements are enabled.',
      'page callback' => 'xml_pbcore',
      'page arguments' => array(2),
      'access arguments' => array('access content'), 
      'type' => MENU_CALLBACK,
      'file' => 'mb_kaltura.inc',
      );
   $items['mb_kaltura/autocomplete/collection'] = array(
      'title' => 'Ahah callback',
      'access arguments' => array('access content'),
      'page callback'    => 'mb_kaltura_autocomplete_collection',
      'type' => MENU_CALLBACK,
      'file' => 'mb_kaltura.inc',
      );
   $items['mb_kaltura/autocomplete/user'] = array(
      'title' => 'Ahah callback',
      'access arguments' => array('access content'),
      'page callback' => 'mb_kaltura_autocomplete_user',
      'type' => MENU_CALLBACK,
      'file' => 'mb_kaltura.inc',
      );
   $items['mb_kaltura/upload-keepalive'] = array(
      'title' => 'A Keep-alive callback to be called by js during long uploads',
      'page callback' => 'mb_upload_keepalive',
      'access arguments' => array('access content'),
      'file' => 'mb_kaltura.inc',
      'type' => MENU_CALLBACK
      );
   return $items;
}

function mb_kaltura_menu_alter(&$items) {
   //This alter overrides the menu item of same path defined in kaltura.module.
   //Their import mechanism is broken so we re-do it here since we need extra behaviour anyway.
   $items['admin/config/media/kaltura/import']['title'] =  'Import Kaltura Items';
   $items['admin/config/media/kaltura/import']['page callback'] =  'drupal_get_form';
   $items['admin/config/media/kaltura/import']['page arguments'] =   array('mb_kaltura_import_form');
   $items['admin/config/media/kaltura/import']['access arguments'] =  array('administer mediabase');
   $items['admin/config/media/kaltura/import']['file'] =  'mb_kaltura.inc';
   $items['admin/config/media/kaltura/import']['module'] =  'mb_kaltura';

   // This is a copy of  admin/settings/kaltura/entries/import  to go in the content menu
   $items['admin/content/mediabase/import'] = $items['admin/config/media/kaltura/import'];
   $items['admin/content/mediabase/import']['type'] =   MENU_LOCAL_TASK;
}


function mb_kaltura_node_presave($node) {
   module_load_include('inc', 'mb_kaltura', 'mb_kaltura');
   $kaltura_node_types = array('video', 'audio');
   if ( in_array( $node->type , $kaltura_node_types) )  {
      _write_to_node_kaltura($node);
      //autopopulate_pbcore_identifier($node);
      //autopopulate_pbcore_title($node);
      //autopopulate_pbcore_instantiation($node);
   }
}

function mb_kaltura_node_delete($node) {
   /* $kaltura_node_type_names = array('video', 'audio', 'image', 'video2');
   $entry_id = $node->{"field_kaltura_$node->type"}[0]['value'];
   $result=db_query("DELETE FROM {node_kaltura} WHERE kaltura_entryId = '%s'", $entry_id);
   foreach ($node->field_instantiation_noderef as $noderef){
      if ( is_numeric($noderef['nid'] ) ) {
         node_delete($noderef['nid']);
      }
   } */
}

function mb_kaltura_node_update($node) {
   /* $results = _save_kaltura_metadata($node); */
}
function mb_kaltura_node_insert($node) {
   /* $results = _save_kaltura_metadata($node); */
}

function mb_kaltura_form_alter(&$form, &$form_state, $form_id){
   drupal_add_js(drupal_get_path('module', 'mb_kaltura') . '/js/keepalive.js');
   
   switch ($form_id) {
   case 'node_delete_confirm':
      $node = node_load($form['nid']['#value']);
      if ( in_array($node->type, array( 'video', 'audio'))) {
         $newform = array();
         $newform['delete_from_kaltura'] = array( 
            '#type'=>'checkbox',
            '#title' => t('Delete Kaltura version also.'),
            );
         // add the option before the buttons
         $pos = array_search('nid', array_keys($form));
         $form = array_merge(array_slice($form, 0, $pos), $newform, array_slice($form, $pos));
         array_unshift($form['#submit'], 'check_delete_from_kaltura');
      }
      break;
      case 'video_node_form':
      case 'audio_node_form':
         
         $field_name = "field_" . $form['type']['#value'];
         if (isset($form[$field_name][LANGUAGE_NONE])) {
            unset( $form[$field_name][LANGUAGE_NONE][0]['meta_edit']); // Remove the Edit Metadata link completely
            if (!empty($form[$field_name][LANGUAGE_NONE][0]['entryid']['#default_value'])) { 
               // hide the add media button if media exists already.
               // see the js file for logic that un-hides it if media is removed.
               $button = &$form[$field_name][LANGUAGE_NONE][0]['button'];
               $button['#markup'] = str_replace("a href", "a class='hidden' href", $button['#markup']);
            }                                                       
         }
         break;
      } 
}

/**
*  check recent media nodes 
*  compare how many instantiations we are expecting (per type)
*  check for timeouts somehow
*  probably we can fetch the flavor profile for expected flavor sets
*/
function mb_kaltura_cron() {
}

function mb_kaltura_field_formatter_info() {
   return array(
      'field_kaltura_player_html5_video' => array(
         'label' => t('Raw Video Tag for Html5 Video'),
         'field types' => array('field_kaltura_entryid'),
         'setting' => array(
            ),
         ),
      'field_kaltura_player_html5_audio' => array(
         'label' => t('Raw Audio Tag for Html5 Audio'),
         'field types' => array('field_kaltura_entryid'),
         'setting' => array(
            ),
         ),
      );
}

function mb_kaltura_theme() {
   return array(
      'kaltura_player_html5_video' => array(
         'variables' => array(),
         //'file' => 'mb_kaltura.theme.inc',
         ),
      'kaltura_player_html5_audio' => array(
         'variables' => array(),
         ),
      'mb_kaltura_import_form' => array(
         'function' => 'theme_mb_kaltura_import_form',
         'file' => 'mb_kaltura.inc',
         ),
      );
}

function mb_kaltura_video_tag($entry_id) {
   if ( empty($entry_id) ) {
      return;
   }
   $client=KalturaHelpers::getKalturaClient($isAdmin=TRUE);
   try {
      $flavors=$client->flavorAsset->getByEntryId($entry_id);
   }
   catch (Exception $e) {
      watchdog('mb_kaltura', t('Kaltura Exception: %message, backtrace: <pre>!trace</pre>'), array('%message' => $e->getMessage(), '!trace' => $e->getTrace()));
      $msg = t("Had trouble retrieving flavors for Kaltura entry $entry_id.");
      $msg .= sprintf( "%s: %s %s <br/> %s %s", get_class($e), $e->getMessage(), $e->getCode(), $e->getFile(), $e->getLine());
      drupal_set_message( $msg, "error" );
   }
   
   $html5_sources = array();
   foreach ($flavors as $flavor) {
      if ( !($flavor->status == KalturaFlavorAssetStatus::READY) || $flavor->isOriginal ) {
         continue;
      }
		
      if ( in_array( $flavor->fileExt, array('webm', 'mp4', 'ogg') ) ) {
         	if ( $flavor->fileExt == 'mp4' 
         		&& ( !in_array( 'h264', explode(",",$flavor->tags) ) ) ) {
                 //|| $flavor->bitrate < 600 ) ) {
         					continue;
                 }
         $location = $client->flavorAsset->getDownloadUrl($flavor->id);
         $html5_sources[] = (object)array(
            'type' => $flavor->fileExt,
            'src' => $location,
            'width' => $flavor->width,
            'height' => $flavor->height,
            );
      }
   }
   return theme('kaltura_player_html5_video', array('html5_sources' => $html5_sources));
}


function mb_kaltura_audio_tag($entry_id) {
   if ( empty($entry_id) ) {
      return;
   }

   $client=KalturaHelpers::getKalturaClient($isAdmin=TRUE);
   try {
      $flavors=$client->flavorAsset->getByEntryId($entry_id);
   }
   catch (Exception $e) {
      watchdog('mb_kaltura', t('Kaltura Exception: %message, backtrace: <pre>!trace</pre>'), array('%message' => $e->getMessage(), '!trace' => $e->getTrace()));
      $msg = t("Had trouble retrieving flavors for Kaltura entry $entry_id.");
      $msg .= sprintf( "%s: %s %s <br/> %s %s", get_class($e), $e->getMessage(), $e->getCode(), $e->getFile(), $e->getLine());
      drupal_set_message( $msg, "error" );
   }
   
      $html5_sources = array();
   foreach ($flavors as $flavor) {
      if ( !($flavor->status == KalturaFlavorAssetStatus::READY) || $flavor->isOriginal ) {
         continue;
      }
		
      if ( in_array( $flavor->fileExt, array('mp3', 'mp4', 'ogg') ) ) {
         $location = $client->flavorAsset->getDownloadUrl($flavor->id);
         $html5_sources[] = (object)array(
            'type' => $flavor->fileExt,
            'src' => $location,
            );
         
      }
   }
   return theme('kaltura_player_html5_audio', array('html5_sources' => $html5_sources));
}

function mb_kaltura_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
   $element = array();
   $settings = $field['settings'];
   $entry_id = $items[0]['entryid'];
   $type = !empty($items[0]['mediatype']) ? $items[0]['mediatype'] : $query['kaltura_media_type'];
   
   switch ($display['type']) {
   case 'field_kaltura_player_html5_video':
      $element[0]['#markup'] = mb_kaltura_video_tag($entry_id);
      break;
   case 'field_kaltura_player_html5_audio':
      $element[0]['#markup'] = mb_kaltura_audio_tag($entry_id);
      break;
   }
   return $element;
}

function theme_kaltura_player_html5_video($vars) {
   $out = '<div class="kaltura">';
   $out .= '<div class="kaltura-html5-video">
   <video controls="controls">';
   foreach ($vars['html5_sources'] as $src) {
      $out .= "<source type='video/$src->type' src='$src->src' width='$src->width' height='$src->height' />";      
   }
   $out .= '</video>
   </div>';
   $out .= '</div>';
   return $out;
}

function theme_kaltura_player_html5_audio($vars) {
   $out = '<div class="kaltura">';
   $out .= '<div class="kaltura-html5-audio">
   <audio controls="controls">';
   foreach ($vars['html5_sources'] as $src) {
      $out .= "<source type='audio/$src->type' src='$src->src'  />";      
   }
   $out .= '</audio>
   </div>';
   $out .= '</div>';
   return $out;
}


/*
===============
SUBMIT HANDLERS
===============
*/
function check_delete_from_kaltura(&$form, &$form_state) {
   if ( $form_state['values']['delete_from_kaltura'] == 1 ) {
      module_load_include('inc', 'mb_kaltura', 'mb_kaltura');
      $nid = $form_state['values']['nid'];
      $node = node_load($nid);
      $client=KalturaHelpers::getKalturaClient($isAdmin=true);
      $objectId= _get_entry_id_from_node($node);
      $objectId = str_replace(",","",$objectId);
      $client->media->delete($objectId);
      $msg = t("Deleted entry_id, @entryid from Kaltura server", array('@entryid' => $objectId));
      drupal_set_message( $msg ); 
   }
}

