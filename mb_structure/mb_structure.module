<?php
/**
* This module provides customizations and features for the archive->collection group structures
**/

define( "COLLECTION_TAXONOMY_VID", 11);

function mb_structure_block_info() {
   $blocks=array();
   $blocks['collection_detail'] = array(
      'info' => 'Collection Detail',
      'custom' => FALSE,
      );
   $blocks['lets_get_started'] = array(
      'info' => 'Let\'s get started!',
      'custom' => FALSE,
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => 'user_is_logged_in()'
      );
   return $blocks;
}

function mb_structure_block_view($delta) {
   switch($delta) { 
   case 'collection_detail':
      $block['subject'] = 'Collection Detail';
      $block['content'] = collection_block_details();
      return $block;
   case 'lets_get_started':
      if(!user_is_logged_in()) { // is there a better way to do this?
         return null; 
      }
      $block['subject'] = t('Let\'s get started!');
      $block['content'] = drupal_get_form('mb_structure_create_collection_form');
      return $block;
   }
}


function collection_block_details() {
   if ( ! $node = get_node_from_path() ) {
      return;
   }
   if ( "collection" == $node->type ) {
      $output = "<ul>";
      
      // create video
      $gid = mb_get_gid_from_nid($node->nid);
      
      if(og_is_member($gid, 'user') /* && og_user_access($gid, 'create video content') */){
         $create_video_link = l("Upload a Video", "node/add/video", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_video_link</li>";
      }
      
      // create audio
      if(og_is_member($gid, 'user') /* && og_user_access($gid, 'create video content') */){
         $create_audio_link = l("Upload Audio", "node/add/audio", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_audio_link</li>";
      }
      
      if (og_user_access_by_entity('add user', 'node', $node->nid)) {
         // Add members
         $add_members_link = l("Add Members", "group/node/$node->nid/admin/people/add-user"); 
         $output .= "<li>$add_members_link</li>";
         
         // View members (Admin)
         $view_members_link = l("Manage Members", "group/node/$node->nid/admin/people"); 
         $output .= "<li>$view_members_link</li>";
      }
      
      //administrator
      $owner = user_load($node->uid);
      $output .= "<li>" . t("Collection Manager: ") . l($owner->name, "user/$owner->uid") . "</li>";
      
      //count objects
      $query = new EntityFieldQuery();
      $result = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', array('audio','video'), 'IN')
      ->fieldCondition('group_audience', 'state', array(1), 'IN', 0)
      ->fieldCondition('group_audience', 'gid', $gid, '=', 0)
      ->execute();
      
      $count = isset($result['node']) ? sizeof($result['node']) : 0;
      $text = t("@count media item(s)", array('@count' => $count));
      $output .= "<li>$text</li>";
   } 
   $output .= "</ul>";
   return $output;
}


function get_node_from_path(){
   $object = menu_get_object();
   // Check if this is an existing node.
   if (!empty($object->nid)) {
      return $object;
   }
}

/**
* Implementation of hook_form_alter
* make Collection names unique;
**/
function mb_structure_form_alter(&$form, &$form_state, $form_id) {
   $form_ids = array( 'collection_node_form', 'archive_node_form', 'video_node_form', 'audio_node_form');
   if ( in_array( $form_id, $form_ids ) ) {
      switch ( $form_id ) {
      case 'collection_node_form' :
         // Make sure there are no dupe titles since that will cause problems with taxonomy-based collection views
         $form['title']['#element_validate'][] = 'mb_structure_validate_title';   
         // Hide the ability to set Collection to not be a group
         $form['group_group']['und']['#type'] = 'hidden';
         //Hide 'published collection name'
         unset($form['taxonomy'][COLLECTION_TAXONOMY_VID]);
         
         // Limit ARCHIVE options to actual archives
         $field_language = field_language('node', $form['#node'], 'group_audience');
         $opts = &$form['group_audience'][$field_language]['#options'];
         $opts =  !empty($opts) ? $opts : array();
         foreach ($opts as $key => $opt_group) {
            if (! is_array($opt_group)) { continue; }
            foreach ($opt_group as $gid => $option) {
               $group = og_get_group('group',$gid);
               $node = node_load($group->etid);
               if ($node->type !== 'archive') {
                  unset( $opts[$key][$gid]);
               }
            }
            // rename optgroups
            if ( $key == 'My groups' ) {
               $new_key = t('My archives');
               $opts[$new_key] = $opts[$key];
               unset( $opts[$key]);
            }
            if ( $key == 'Other groups' ) {
               $new_key = t('Other archives');
               $opts[$new_key] = $opts[$key];
               unset( $opts[$key]);
            }
         }
         break;
      case 'video_node_form': // deliberate fall through
      case 'audio_node_form':
         // limit collection options to actual collections
         $field_language = field_language('node', $form['#node'], 'group_audience');
         $opts = &$form['group_audience'][$field_language]['#options'];
         $opts =  !empty($opts) ? $opts : array();
         foreach ($opts as $key => $opt_group) {
            if (! is_array($opt_group)) { continue; }
            foreach ($opt_group as $gid => $option) {
               $group = og_get_group('group',$gid);
               $node = node_load($group->etid);
               if ($node->type !== 'collection') {
                  unset( $opts[$key][$gid] );
               }
            }
            // rename optgroups
            if ( $key == 'My groups' ) {
               $new_key = t('My collections');
               $opts[$new_key] = $opts[$key];
               unset( $opts[$key] );
            }
            elseif ( $key == 'Other groups' ) {
               $new_key = t('Other collections');
               $opts[$new_key] = $opts[$key];
               unset( $opts[$key] );
            }
         }
         break;
      case 'archive_node_form':
         break;
      }
   }
   
   if( isset($form['group_audience']) && isset($form['#node'])) {
      limit_group_audience($form);
   }

}

function mb_structure_validate_title($element, &$form_state) {
   $nid = $form_state['values']['nid'];   
   $sql = "SELECT 1 FROM {node} WHERE title = '%s' AND type = '%s' ";
   $sql .= is_numeric( $nid ) ? " AND nid != " . $nid : ''; 
   $res = db_query($sql,array($form_state['values']['title'],$form_state['values']['type']))->fetchField();
   if ($res) {
      $msg = 'There is already a !type with the title <em>!title</em>. Please provide a unique title.';
      form_error($element, t( $msg, array('!type' => $form_state['values']['type'],'!title' => $form_state['values']['title'])));
   }
}

function mb_structure_create_collection_form() {
   $form['call_to_action'] = array(
      '#type' => 'hidden',
      '#value' => '',
      '#prefix' => t('It\'s easy to set up a collection and begin uploading your media files.')
      );
   $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Create a New Collection'),
      );
   $form['#action'] = base_path() . 'node/add/collection';
   return $form;
}

/**
* Get the group ID for a given node.
*
* Helper function for Organic Groups: an easy way toget a gid without loading
* a full group.  Borrowed from within og_get_group().
* See: http://data.agaric.com/organic-groups-drupal-7-does-not-use-entity-ids-group-ids
*/
function mb_get_gid_from_nid($nid) {
   // Note: Caching is handled within og_get_group_ids().
   if ($gids = og_get_group_ids('node', array($nid))) {
      // We don't use the entity ID directly, as it might change. For example, if
      // a node is a translation of another node that is a group, we need to load
      // the other node. og_get_group_ids() returns the correct entity ID as the
      // key, so we will use that.
      $correct_etid = key($gids);
   }
   return $gids[$correct_etid];
}

/**
* OG7 allows non-members to post to groups
* og_create_perms corrects this but still allows all groups to appear in Group Audience field.
* This form alter removes those groups of which current user is not a member
* See: http://drupal.org/node/1139180#comment-4861224
*/
function limit_group_audience(&$form) {
      $content_gids = $form['group_audience']['und']['#audience']['content groups'];
      $other_gids = $form['group_audience']['und']['#audience']['other groups'];
      $node_type = $form['#node']->type;
      $new_content_gids = array();
      $new_other_gids = array();
      foreach($content_gids as $gid => $group_name) {
         // check to see if user has create permission for this node type
         if(og_is_member($gid, 'user') && og_user_access($gid, 'create ' . $node_type . ' content')){
            $new_content_gids[$gid] = $group_name;
         }
         else{
            unset($form['group_audience']['und']['#options'][$gid]);
         }
      }
      foreach($other_gids as $gid => $group_name) {
         // check to see if user has create permission for this node type
         if(og_is_member($gid, 'user') && og_user_access($gid, 'create ' . $node_type . ' content')){
            $new_other_gids[$gid] = $group_name;
         }
         else{
            unset($form['group_audience']['und']['#options'][$gid]);
         }
      }
      // Not sure if this is necessary since it's a hidden field
      $form['group_audience']['und']['#audience']['content groups'] = $new_content_gids;
      $form['group_audience']['und']['#audience']['other groups'] = $new_other_gids;
}


