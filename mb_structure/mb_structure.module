<?php
/**
* This module provides a UI and some backend utilities for the collection->team group structures
**/

function mb_structure_block_info() {
   $blocks=array();
   $blocks['collection_detail'] = array(
      'info' => 'Collection Detail',
      'custom' => FALSE,
      );
   $blocks['collection_media_listing'] = array(
      'info' => 'Collection Media Listing',
      'custom' => FALSE,
      );
   $blocks['lets_get_started'] = array(
      'info' => 'Let\'s get started!',
      'custom' => FALSE,
      'visibility' => BLOCK_VISIBILITY_PHP,
      'pages' => 'user_is_logged_in()'
      );
   return $blocks;
}

function mb_structure_block_view($delta) {
   switch($delta) { 
   case 'collection_detail':
      $coll_det = t("Collection");
      if ( $node = get_node_from_path() ) {
         $team_det = t("Team");
         $block_subj = "collection" == $node->type ? $coll_det : $team_det;
      } else {
         $block_subj = $coll_det;
      }         
      $block['subject'] = $block_subj;
      $block['content'] = collection_block_details();
      return $block;
   case 'collection_media_listing':
      $block['subject'] = t('Media');
      $block['content'] = collection_media_listing();
      return $block;
      
   case 'lets_get_started':
      if(!user_is_logged_in()) { // is there a better way to do this?
         return null; 
      }
      $block['subject'] = t('Let\'s get started!');
      $block['content'] = drupal_get_form('mb_structure_create_collection_form');
      return $block;
   }
}

function collection_block_details() {
   global $user;
   
   if ( ! $node = get_node_from_path() ) {
      return;
   }
   if ( in_array($node->type, array( "collection", "team") ) )    {
      $output = "<ul>";
      
      // get the collection group object from the nid
      $group = og_get_group('node', $node->nid);
      $owner = user_load($node->uid);
      $is_owner = $user->uid == $node->uid;
      $gid = $group->gid;
      
      // create video
      if(og_is_member($gid, 'user') || og_user_access($gid, 'administer group') ){
         $create_video_link = l("Upload a Video", "node/add/video", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_video_link</li>";
      }
      
      // create audio
      if(og_is_member($gid, 'user') || og_user_access($gid, 'administer group') ){
         $create_audio_link = l("Upload Audio", "node/add/audio", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_audio_link</li>";
      }
      
      if (og_user_access_by_entity('add user', 'node', $node->nid)) {
         // Add members
         $add_members_link = l("Add Members", "group/node/$node->nid/admin/people/add-user"); 
         $output .= "<li>$add_members_link</li>";
         
         // View members (Admin)
         $view_members_link = l("Manage Members", "group/node/$node->nid/admin/people"); 
         $output .= "<li>$view_members_link</li>";
      }
      
      // add a new team
      if( "collection" == $node->type && og_user_access($gid, 'administer group') ){
         $create_team_link = l("Add a new Team", "node/add/team", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_team_link</li>";
      }
      
      // administrator user link
      $coll_man = t("Manager: ");
      $team_man = t("Team Manager: ");
      $man_label = "collection" == $node->type ? $coll_man : $team_man;
      $name = $owner->name;
      if ( module_exists('realname')) {
         $name = realname_load($owner);
      }
      $output .= "<li>" . $man_label . l($name, "user/$owner->uid") . "</li>";
      
      //count objects
      $query = new EntityFieldQuery();
      $result = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', array('audio','video'), 'IN')
      ->fieldCondition('group_audience', 'state', array(1), 'IN', 0)
      ->fieldCondition('group_audience', 'gid', $gid, '=', 0)
      ->execute();
      
      $count = isset($result['node']) ? sizeof($result['node']) : 0;
      $text = t("@count media item(s)", array('@count' => $count));
      $output .= "<li>$text</li>";
   } 
   $output .= "</ul>";
   return $output;
}

function get_node_from_path(){
   $object = menu_get_object();
   // Check if this is an existing node.
   if (!empty($object->nid)) {
      return $object;
   }
}

/**
* Implementation of hook_form_alter for COLLECTION_NODE_FORM
**/
function mb_structure_form_collection_node_form_alter(&$form, &$form_state, $form_id) {
   // Make sure there are no dupe titles
   $form['title']['#element_validate'][] = 'mb_structure_validate_title';   
   // Hide the ability to set Collection to not be a group
   $form['group_group']['und']['#type'] = 'hidden';
}

/**
* Implementation of hook_form_alter for TEAM_NODE_FORM
**/
function mb_structure_form_team_node_form_alter(&$form, &$form_state, $form_id) {
   
   // Make sure there are no dupe titles
   $form['title']['#element_validate'][] = 'mb_structure_validate_title';   
   // Hide the ability to set team to not be a group
   $form['group_group']['und']['#type'] = 'hidden';
   
   // Limit COLLECTION PARENT options to  collection and teams 
   $field_language = field_language('node', $form['#node'], 'group_audience');
   $opts = &$form['group_audience'][$field_language]['#options'];
   $orig_opts =  !empty($opts) ? $opts : array();
   $new_opts = array();
   $coll_key = t('Collections');
   foreach ($orig_opts as $key => $opt_group) {
      if (! is_array($opt_group)) { continue; }
      foreach ($opt_group as $gid => $option) {
         $group = og_get_group('group',$gid);
         $node = node_load($group->etid);
         if ( in_array($node->type, array('collection'))  && ( og_is_member($gid, 'user') || og_user_access($gid, 'administer group') ) ) {
            $new_opts[$coll_key][$gid] = $orig_opts[$key][$gid];
         }
      }
      $opts = $new_opts;
   }
}


function mb_structure_form_alter(&$form, &$form_state, $form_id) {
   //dpm($form_id, "form_id");
}

/**
* Implementation of hook_form_alter for VIDEO_NODE_FORM
**/
function mb_structure_form_video_node_form_alter(&$form, &$form_state, $form_id) {
   // Limit GROUP AUDIENCE options to  collection and teams 
   $new_opts = array();
   $coll_key = t('Collections');
   $team_key = t('Teams');
   $all_groups = og_get_all_group();
   foreach ($all_groups as $gid) {
      $group = og_get_group('group',$gid);
      $node = node_load($group->etid);
      if ( ! in_array($node->type, array('collection', 'team'))) {
         continue;
      }
      if ( ($node->type == 'team' && mb_structure_is_team_super_user($node))
         ||  (og_is_member($gid, 'user') || og_user_access($gid, 'administer group')) 
      ) {
      $new_key = $node->type == 'collection' ? $coll_key : $team_key;
      $new_opts[$new_key][$gid] = $group->label;
      } 
   }
   $form['group_audience'][LANGUAGE_NONE]['#options'] = $new_opts;
   
   // Set the ROOT KMAP BRANCH for SUB-COLLECTIONS
   $collection_node = get_collection_ancestor_node($form['#node']);
   if ( isset($collection_node->field_subcoll_root_kmap_id[LANGUAGE_NONE]) ) {
      $tid = $collection_node->field_subcoll_root_kmap_id[LANGUAGE_NONE][0]['tid'];
      $term = taxonomy_term_load($tid);
      $kmap_id = $term->kmap_id[LANGUAGE_NONE][0]['value'];
      drupal_add_js(array('mb_structure' => array( 'subcollection_root_kmap_id' => $kmap_id) ), 'setting');
   }
}

/**
* Implementation of hook_form_alter for AUDIO_NODE_FORM
**/
function mb_structure_form_audio_node_form_alter(&$form, &$form_state, $form_id) {
   mb_structure_form_video_node_form_alter($form, $form_state, $form_id);
}

function mb_structure_validate_title($element, &$form_state) {
   $nid = $form_state['values']['nid'];   
   $sql = "SELECT 1 FROM {node} WHERE title = '%s' AND type = '%s' ";
   $sql .= is_numeric( $nid ) ? " AND nid != " . $nid : ''; 
   $res = db_query($sql,array($form_state['values']['title'],$form_state['values']['type']))->fetchField();
   if ($res) {
      $msg = 'There is already a !type with the title <em>!title</em>. Please provide a unique title.';
      form_error($element, t( $msg, array('!type' => $form_state['values']['type'],'!title' => $form_state['values']['title'])));
   }
}

function mb_structure_create_collection_form() {
   $form['call_to_action'] = array(
      '#type' => 'hidden',
      '#value' => '',
      '#prefix' => t('It\'s easy to set up a collection and begin uploading your media files.')
      );
   $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Create a New Collection'),
      );
   $form['#action'] = base_path() . 'node/add/collection';
   return $form;
}
 
function collection_media_listing() {
   $view = views_get_view('media_by_kmap');
   $view->execute_display('default', array($kmap_id));
   $output = !empty($view->result) ? $view->render() : sprintf('<div>%s</div>',t( 'There are no media items for this characteristic.' ));
   return $output;
}

/**
* implementation of hook_views_query_alter
**/
function mb_structure_views_query_alter(	&$view, &$query ) {
   if ( 'collection_media' != $view->name || (! $node = get_node_from_path() && !in_array($node->type, array('team','collection')))) {
      return;
   }
   $node = get_node_from_path();
   $group = og_get_group('node', $node->nid);
   $gid = $group->gid;
   // Get gids of the teams for the collection
   $efq = new EntityFieldQuery();
   $result = $efq
   ->entityCondition('entity_type', 'node')
   ->propertyCondition('type', 'team', '=')
   ->fieldCondition('group_audience', 'gid', $gid, '=', 0)
   ->execute();
   
   $gids = array($gid);
   foreach ($result['node'] as $team_nid => $team_node) {
      $group = og_get_group('node', $team_nid);
      $gids[] = $group->gid;
   }
   $view->args[0] = implode(", ",$gids);
   $query->where[0]['conditions'][0]['value'][':og_membership_group'] = $gids;
}

function mb_structure_node_view($node, $view_mode, $langcode) {
   if ( in_array($node->type, array('audio','video')) && $collection_node = get_collection_ancestor_node($node) ) {
      $path = "node/$collection_node->nid";
      $alias = drupal_get_path_alias($path);
      $link = l($collection_node->title, $alias);
      $node->content['collection_ancestor'] = array(
         '#type' => 'item',
         '#label_display' => 'inline',
         '#markup' => $link,
         '#title' => t('Collection:'),
         );
      $node->content['#group_children']['collection_ancestor'] = 'group_details';
   }
}

function get_collection_ancestor_node($node) {
   $collection_node = null;
   if ( $gids = og_get_entity_groups('node', $node) ) { 
      $gid = array_pop( $gids );
      $parent_group = og_load($gid);
      if ($parent_group->entity_type == 'node') {
         $group_node = node_load($parent_group->etid);
         if ( $group_node->type == 'collection' ) {
            $collection_node=$group_node;
         } else if ( $group_node->type == 'team' ){  //  recurse to get to the collection of a team node
            return get_collection_ancestor_node($group_node); 
         }
      }
   }
   return $collection_node;
}

function mb_structure_is_team_super_user($node) {
   if( $node->type == 'team' && $collection_gids = $node->group_audience[LANGUAGE_NONE]) {
      return og_user_access($collection_gids[0]['gid'], 'administer group');
   }
}

function mb_structure_get_team_gids($collection_gid) {
   $gids = array();
   $query = new EntityFieldQuery();
   $result = $query
   ->entityCondition('entity_type', 'node')
   ->propertyCondition('type', 'team')
   ->fieldCondition('group_audience', 'state', array(1), 'IN', 0)
   ->fieldCondition('group_audience', 'gid', $gid, '=', 0)
   ->execute();
}

function mb_structure_get_collection_gid($team_gid) {
   $group = og_load($team_gid);
   $node = node_load($parent_group->etid);
   $collection_node = get_collection_ancestor_node($node);
   $collection_group = og_get_group('node', $collection_node->nid);
   return $collection_group->gid;
}
