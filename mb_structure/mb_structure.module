<?php

/**
* This module provides a UI and some backend utilities for the collection->team group structures
**/

function mb_structure_block_info() {
   $blocks=array();
   $blocks['collection_detail'] = array(
      'info' => 'Collection Detail',
      'cache' => DRUPAL_NO_CACHE,
   );
	 $blocks['collection_manage'] = array(
	 		'info' => 'Collection Links (Manage)',
      'cache' => DRUPAL_NO_CACHE,
	 );
   $blocks['collection_media_listing'] = array(
      'info' => 'Collection Media Listing',
   );
   $blocks['lets_get_started'] = array(
      'info' => 'Let\'s get started!',
      'visibility' => BLOCK_VISIBILITY_PHP,
      //'pages' => 'user_is_logged_in()'
   );
   $blocks['already_started'] = array(
      'info' => 'Already started?',
      'visibility' => BLOCK_VISIBILITY_PHP,
      //'pages' => 'user_is_logged_in()'
   );
      
   $blocks['collections_carousel'] = array(
      'info' => 'Collections Carousel',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
   );
   return $blocks;
}

function mb_structure_block_view($delta) {
   switch($delta) { 
     case 'collection_detail':
			 $block = array();
			 $node = get_node_from_path();
       if ( $node && in_array($node->type, array( "collection", "team")) ) {
          $block_subj = ("collection" == $node->type) ? t("Collection") : t("Team");
	        $block['subject'] = $block_subj;
	        $block['content'] = collection_block_details($node);
       }       
       return $block;
				
		 case 'collection_manage':
			 $block = array();
			 $node = get_node_from_path();
  		 if ( $node && in_array($node->type, array( "collection", "team") ) )    {
				  if ( $perms = mb_structure_get_group_access_level($node) ) {
		        $block['subject'] = t("Manage");
		        $block['content'] = manage_collection_block($node, $perms);
					}
			  }
				return $block;
				
     case 'collection_media_listing':
        $block['subject'] = t('Media');
        $block['content'] = collection_media_listing();
        return $block;
        
     case 'lets_get_started':
        if(!user_is_logged_in()) { // is there a better way to do this?
           return null; 
        }
        $block['subject'] = t('Create a collection');
        $block['content'] = drupal_get_form('mb_structure_lets_get_started_form');
        return $block;
        
     case 'already_started':
        $groups = mb_structure_get_groups_for_user();
        if(!user_is_logged_in() || empty($groups) ) { // is there a better way to do this?
           return null; 
        }
        $block['subject'] = t('Add to your collections');
        $block['content'] = drupal_get_form('mb_structure_already_started_form');
        return $block;
               
     case 'collections_carousel':
       $block['subject'] = t('Collections');
       $block['content'] = mb_structure_collections_carousel_block();
       return $block;
   }
}

function collection_block_details($node) {
  global $user;
	// get the collection group object from the nid
	$group = og_get_group('node', $node->nid);
	$owner = user_load($node->uid);
	$is_owner = $user->uid == $node->uid;
	$gid = $group->gid;
	
	// administrator user link
	$coll_man = t("Manager: ");
	$team_man = t("Team Manager: ");
	$man_label = ("collection" == $node->type) ? $coll_man : $team_man;
	$man_name = $owner->name;
	if ( module_exists('realname')) {
	   $man_name = realname_load($owner);
	} 
		
	//count media objects in collection/team
	$query = new EntityFieldQuery();
	$result = $query
	  ->entityCondition('entity_type', 'node')
	  ->propertyCondition('type', array('audio','video'), 'IN')
	  ->fieldCondition('group_audience', 'state', array(1), 'IN', 0)
	  ->fieldCondition('group_audience', 'gid', $gid, '=', 0)
	  ->execute();
	$count = isset($result['node']) ? sizeof($result['node']) : 0;
	$count_str = t("@count media item(s)", array('@count' => $count));
	
	$output = '<div class="collection-stats">';
	$output .= '<div class="owner"><span class="stat">' . $man_label . '</span> <span class="value">' . $man_name . '</span></div>';
	$output .= '<div class="item-count">' . $count_str . '</div>';
	$output .= '</div>';
	return $output;
}

/** old collection block for reference (12-5-2014) */
function collection_block_details_old() {
   global $user;
   if ( ! $node = get_node_from_path() ) {
      return;
   }
   if ( in_array($node->type, array( "collection", "team") ) )    {
      $output = "<ul>";
      
      // get the collection group object from the nid
      $group = og_get_group('node', $node->nid);
      $owner = user_load($node->uid);
      $is_owner = $user->uid == $node->uid;
      $gid = $group->gid;
      
      // create video
      if(og_is_member($gid, 'user') || og_user_access($gid, 'administer group') ){
         $create_video_link = l("Upload a Video", "node/add/video", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_video_link</li>";
      }
      
      // create audio
      if(og_is_member($gid, 'user') || og_user_access($gid, 'administer group') ){
         $create_audio_link = l("Upload Audio", "node/add/audio", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_audio_link</li>";
      }
      
      if (og_user_access_by_entity('add user', 'node', $node->nid)) {
         // Add members
         $add_members_link = l("Add Members", "group/node/$node->nid/admin/people/add-user"); 
         $output .= "<li>$add_members_link</li>";
         
         // View members (Admin)
         $view_members_link = l("Manage Members", "group/node/$node->nid/admin/people"); 
         $output .= "<li>$view_members_link</li>";
      }
      
      // add a new team
      if( "collection" == $node->type && og_user_access($gid, 'administer group') ){
         $create_team_link = l("Add a new Team", "node/add/team", array('query' => array('gids_node[]' => $node->nid))); 
         $output .= "<li>$create_team_link</li>";
      }  
      
      // administrator user link
      $coll_man = t("Manager: ");
      $team_man = t("Team Manager: ");
      $man_label = "collection" == $node->type ? $coll_man : $team_man;
      $name = $owner->name;
      if ( module_exists('realname')) {
         $name = realname_load($owner);
      } 
      $output .= "<li>" . $man_label . l($name, "user/$owner->uid") . "</li>";
      
      //count media objects in collection/team
      $query = new EntityFieldQuery();
      $result = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', array('audio','video'), 'IN')
      ->fieldCondition('group_audience', 'state', array(1), 'IN', 0)
      ->fieldCondition('group_audience', 'gid', $gid, '=', 0)
      ->execute();
      
      $count = isset($result['node']) ? sizeof($result['node']) : 0;
      $text = t("@count media item(s)", array('@count' => $count));
      $output .= "<li>$text</li>";
   } 
   $output .= "</ul>";
   return $output;
}

/*
 * Configure carousel block to determine which projects to highlight
 */
function mb_structure_block_configure($delta='') {
	$form = array();
	if($delta == 'collections_carousel') {
  	$form['collections_carousel'] = array(
			'#type' => 'fieldset',
			'#title' => t('Carousel Settings'),
		);
		$form['collections_carousel']['project_ids'] = array(
			'#type' => 'textfield',
			'#title' => t('Project ID to Include in Carousel'),
			'#description' => t('Enter the Node IDs for the projects you wish to show in the carousel separated by commas'),
      '#default_value' => variable_get('carousel_block_project_ids', '3'),
			'#required' => TRUE,
		);
		$form['collections_carousel']['block_speed'] = array(
			'#type' => 'textfield',
			'#title' => t('Speed of Carousel'),
			'#description' => t('Enter the number of seconds to pause between frames'),
      '#default_value' => variable_get('carousel_block_speed', 8),
			'#required' => TRUE,
		);
	}
	return $form;
}

function mb_structure_block_save($delta = '', $edit = array()) {
	if($delta == 'collections_carousel') {
		variable_set('carousel_block_project_ids', str_replace(' ', '', $edit['project_ids']));
		variable_set('carousel_block_speed', $edit['block_speed']);
	}
}
			
/**
 * Returns currents users access to group. False = none; 1 = user (add content), 2 = add members, 3 = administrator
 */
function mb_structure_get_group_access_level($node) {
	global $user;
	
	$can_manage = FALSE;
	$group = og_get_group('node', $node->nid);
	$owner = user_load($node->uid);
	$is_owner = $user->uid == $node->uid;
	$gid = $group->gid;
	if(og_is_member($gid, 'user')) {
		$can_manage = 1;
	}
	if(og_user_access_by_entity('add user', 'node', $node->nid)) {
		$can_manage = 2;
	}
	if(og_user_access($gid, 'administer group')) {
		$can_manage = 3;
	}
	return $can_manage;
}

function manage_collection_block($node, $perms) {

   $output = '<div class="manage-collection">';
    
   // create video
   if($perms){
      $create_video_link = l("Upload a Video", "node/add/video", array('query' => array('gids_node[]' => $node->nid))); 
      $output .= "<div class=\"link\">$create_video_link</div>";
   }
    
   // create audio
   if($perms){
      $create_audio_link = l("Upload Audio", "node/add/audio", array('query' => array('gids_node[]' => $node->nid))); 
      $output .= "<div class=\"link\">$create_audio_link</div>";
   }
    
   if ($perms > 1) {
      // Add members
      $add_members_link = l("Add Members", "group/node/$node->nid/admin/people/add-user"); 
      $output .= "<div class=\"link\">$add_members_link</div>";
       
      // View members (Admin)
      $view_members_link = l("Manage Members", "group/node/$node->nid/admin/people"); 
      $output .= "<div class=\"link\">$view_members_link</div>";
   }
    
   // add a new team
   if( "collection" == $node->type && $perms == 3 ){
      $create_team_link = l("Add a new Team", "node/add/team", array('query' => array('gids_node[]' => $node->nid))); 
      $output .= "<div class=\"link\">$create_team_link</div>";
   }
	 $output .= '</div>';
	 return $output;  
	 
}

function get_node_from_path(){
   $object = menu_get_object();
   // Check if this is an existing node.
   if (!empty($object->nid)) {
      return $object;
   } else {
     // For Apache Search Page (collhome/%) that creates new Collection Home menu_get_object doesn't work (with 'collhome' url)
     // So use code below to load the node and return. NEED TO CHECK When apache search page replaces the present collection page (2013-08-28, ndg)
     $menuitem = menu_get_item() ;
     if($menuitem["page_arguments"][0] == "collection_home") {
        $collid = array_pop($menuitem["page_arguments"]);
        if($collpath = drupal_get_normal_path("collection/$collid")) {
          $nid = array_pop(explode('/', $collpath));
          if($node = node_load($nid)) {
            return $node;
          }
        }
     }
   }
}

/** Form alter functions **/

function mb_structure_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
   /*    dpm($form_state, "form_state");
   
   if (arg(0) == "node" && $group = og_get_group('node', arg(1) ) ) {
   $gid = $group->gid;
   $all_terms = array();
   
   // get terms limited by content in group
   $view = views_get_view('terms_in_group');
   dd($view, "view");
   
   $view->execute_display($display, array($gid));
   
   foreach ($view->result as $term) {
   //dpm($term->tid, "term->tid");
   $label = $term->taxonomy_term_data_name . " (" . $term->node_taxonomy_index_nid . ")";
   
   // add term tid to allowed options in filter
   $allowed_tids[$term->tid] = $term->tid; 
   
   // add parent term tids to allowed options in filter
   
   $parents = taxonomy_get_parents_all($term->tid);
   //dpm($parents, "parents of " . $term->tid .' / '. $label);
   foreach ($parents as $parent) {
   $allowed_tids[$parent->tid] = $parent->tid; 
   }
   //dpm($allowed_tids, "allowed_tids");
   }
   // filter out terms that are not allowed
   foreach ($form['field_characteristic_tid']['#options'] as $idx => $option) {
   $option_tid = array_pop(array_keys($option->option));
   if ( in_array( $option_tid, $allowed_tids) ) {
   // do nothing
   // dpm($option_tid, " keeping option_tid");
   }
   else {
   unset($form['field_characteristic_tid']['#options'][$idx]);
   }               
   }
   
   //dpm($form['field_characteristic_tid']['#options'], "form['field_characteristic_tid']['#options']");
   
   }
   */
}

/**
* Implementation of hook_form_alter for COLLECTION_NODE_FORM
**/
function mb_structure_form_collection_node_form_alter(&$form, &$form_state, $form_id) {
	//dpm($form, 'form: ' . $form_id);
	//dpm($form_state, 'form state');
	
   // Make sure there are no dupe titles
   $form['title']['#element_validate'][] = 'mb_structure_validate_title';   
   // Hide the ability to set Collection to not be a group
   $form['group_group']['und']['#type'] = 'hidden';
}

/**
* Implementation of hook_form_alter for TEAM_NODE_FORM
**/
function mb_structure_form_team_node_form_alter(&$form, &$form_state, $form_id) {
   
   // Make sure there are no dupe titles
   $form['title']['#element_validate'][] = 'mb_structure_validate_title';   
   // Hide the ability to set team to not be a group
   $form['group_group']['und']['#type'] = 'hidden';
   
   // Limit COLLECTION PARENT options to  collection and teams 
   $field_language = field_language('node', $form['#node'], 'group_audience');
   $opts = &$form['group_audience'][$field_language]['#options'];
   $orig_opts =  !empty($opts) ? $opts : array();
   $new_opts = array();
   $coll_key = t('Collections');
   foreach ($orig_opts as $key => $opt_group) {
      if (! is_array($opt_group)) { continue; }
      foreach ($opt_group as $gid => $option) {
         $group = og_get_group('group',$gid);
         $node = node_load($group->etid);
         if ( in_array($node->type, array('collection'))  && ( og_is_member($gid, 'user') || og_user_access($gid, 'administer group') ) ) {
            $new_opts[$coll_key][$gid] = $orig_opts[$key][$gid];
         }
      }
      $opts = $new_opts;
   }
}

/**
* Implementation of hook_form_alter for VIDEO_NODE_FORM
**/
function mb_structure_form_video_node_form_alter(&$form, &$form_state, $form_id) {
	//dpm(array('form' => $form, 'form state' => $form_state), "vids f and fs");
	
	// If pbcore title is empty but there is a node title, then use the latter to fill the former
	// This happens with videos imported from Kaltura (ndg, 2014-12-12)
	if(empty($form['field_pbcore_title']['und'][0]['field_title']['und'][0]['value']['#default_value']) && !empty($form['#node']->title)) {
		$form['field_pbcore_title']['und'][0]['field_title']['und'][0]['value']['#default_value'] = $form['#node']->title;
	}
	
	// if Kaltura ID is defined, embed a player that allows thumbnail capture (ndg, 2013-06)
	$flang = field_language('node', $form_state['node'], 'field_video');
	$kid = (isset($form_state['node']->field_video[$flang][0]['entryid'])) ? $form_state['node']->field_video[$flang][0]['entryid'] : NULL;
	if(!empty($kid)) {
		$embed = '<script src="https://cdnapisec.kaltura.com/p/381832/sp/38183200/embedIframeJs/uiconf_id/14448611/partner_id/381832"></script>
      <div id="kaltura_player_1373286644" style="width: 400px; height: 360px; float:left; padding-right: 20px; padding-bottom: 20px;" itemprop="video" itemscope itemtype="http://schema.org/VideoObject">
      <span itemprop="name" content=""></span>
      <span itemprop="description" content=""></span>
      <span itemprop="duration" content=""></span>
      <span itemprop="thumbnail" content=""></span>
      <span itemprop="width" content="400"></span>
      <span itemprop="height" content="360"></span>
      <a href="http://corp.kaltura.com/products/video-platform-features">Video Platform</a>
      <a href="http://corp.kaltura.com/Products/Features/Video-Management">Video Management</a> 
      <a href="http://corp.kaltura.com/Video-Solutions">Video Solutions</a>
      <a href="http://corp.kaltura.com/Products/Features/Video-Player">Video Player</a></div>
      <script>
      kWidget.embed({
        "targetId": "kaltura_player_1373286644",
        "wid": "_381832",
        "uiconf_id": 14448611,
        "flashvars": {
          "streamerType": "auto",
          "ks": "YjU4OWVlNWJhNDU0ODViMzBjNWE5ZmFmNTNlNTVlMTkzOTg3ZTVhN3wzODE4MzI7MzgxODMyOzE2ODk4NjQ4NjE7MjsxMzc0NTA0ODYxLjIzNDE7Ozs7"
        },
        "cache_st": ' . time() . ',
        "entry_id": "' . $kid . '"
      });
      </script>';
      $instruct = '<p><b>' . t('Setting the Thumbnail') . '</b>: ' . 
        t('Use this video player to navigate to a frame in the video and press the camera icon to capture that frame for the video&rsquo;s thumbnail. ' . 
        'The newly-captured frame will replace the current default thumbnail after the video record is saved in Mediabase. ') . 
        '</p><div class="mb_oldthumb">';
	   $form['field_video'][$flang]['#prefix'] .= $embed . $instruct;
	   $form['field_video'][$flang]['#suffix'] = '</div>' . $form['field_video'][$flang]['#suffix'];
	   drupal_add_css('.mb_oldthumb .kaltura_field_thumb img, .mb_oldthumb .kaltura_field_thumb br { display: none; }', array('type' => 'inline'));
   } // End of thumbnail capture embed code
   
   // Limit GROUP AUDIENCE options to  collection and teams 
   $new_opts = mb_structure_get_groups_for_user();
   $form['group_audience'][LANGUAGE_NONE]['#options'] = $new_opts;
   
   // Set the ROOT KMAP BRANCH for SUB-COLLECTIONS
   // if set in the gids_node param get that otherwise if existing node load through get_collection_ancestor_node
   $collection_node = FALSE;
	 if(isset($form['#node']->nid)) {
	 	$collection_node = get_collection_ancestor_node($form['#node']);
	 } else if (isset($_GET['gids_node'])) {
	 	node_load($_GET['gids_node'][0]);
	 }
   if ( $collection_node && isset($collection_node->field_subcoll_root_kmap_id[LANGUAGE_NONE]) ) {
      $tid = $collection_node->field_subcoll_root_kmap_id[LANGUAGE_NONE][0]['tid'];
      $term = taxonomy_term_load($tid);
      $kmap_id = $term->kmap_id[LANGUAGE_NONE][0]['value'];
      drupal_add_js(array('mb_structure' => array( 'subcollection_root_kmap_id' => $kmap_id) ), 'setting');
   }
}


/**
* Implementation of hook_form_alter for AUDIO_NODE_FORM
**/
function mb_structure_form_audio_node_form_alter(&$form, &$form_state, $form_id) {
   mb_structure_form_video_node_form_alter($form, $form_state, $form_id);
}

function mb_structure_validate_title($element, &$form_state) {
   $nid = $form_state['values']['nid'];   
   $sql = "SELECT 1 FROM {node} WHERE title = '%s' AND type = '%s' ";
   $sql .= is_numeric( $nid ) ? " AND nid != " . $nid : ''; 
   $res = db_query($sql,array($form_state['values']['title'],$form_state['values']['type']))->fetchField();
   if ($res) {
      $msg = 'There is already a !type with the title <em>!title</em>. Please provide a unique title.';
      form_error($element, t( $msg, array('!type' => $form_state['values']['type'],'!title' => $form_state['values']['title'])));
   }
}

function mb_structure_lets_get_started_form() {
   $form['call_to_action'] = array(
      '#type' => 'hidden',
      '#value' => '',
      '#prefix' => t('It\'s easy to set up a collection and begin uploading your media files.')
      );
   $form['submit'] = array(
      '#type' => 'submit',
      '#icon' => 'texts',
      '#attributes' => array('class' => array('btn-block')),
      '#value' => t('Create a New Collection'),
       '#submit' => array('mb_structure_new_collection'),
      );
   return $form;
}

function mb_structure_new_collection(&$form_state, $form) {
	global $base_root, $base_path;
	watchdog('mb structure', 'redirect to node add collection');
	drupal_goto($base_root . $base_path . 'node/add/collection');
}

function mb_structure_already_started_form() {
   $options = mb_structure_get_groups_for_user();
   if ( empty ($options) ) {
      return;
   }
   
   $form['call_to_action'] = array(
      '#type' => 'hidden',
      '#value' => '',
      '#prefix' => t('Upload media to one of your collections.')
      );
   $form['collection_id'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#value' => t('Choose a Collection'),
      );
   $form['submit_video'] = array(
      '#type' => 'submit',
      '#icon' => 'video',
      '#attributes' => array('class' => array('btn-block')),
      '#value' => t('Upload a video'),
      '#submit' => array( 'mb_structure_already_started_validate' ),
      );
   $form['submit_audio'] = array(
      '#type' => 'submit',
      '#icon' => 'audio',
      '#attributes' => array('class' => array('btn-block')),
      '#value' => t('Upload audio'),
      '#submit' => array( 'mb_structure_already_started_validate' ),
      );
   return $form;
}

function collection_media_listing() {
   $view = views_get_view('media_by_kmap');
   $view->execute_display('default', array($kmap_id));
   $output = !empty($view->result) ? $view->render() : sprintf('<div>%s</div>',t( 'There are no media items for this characteristic.' ));
   return $output;
}

/**
* implementation of hook_views_query_alter
**/
function mb_structure_views_query_alter(	&$view, &$query ) {
   
   if ($node = get_node_from_path())  {
      $group = og_get_group('node', $node->nid);
      // "if" added to prevent Notice: Trying to get property of non-object in mb_structure_views_query_alter() (line 367 of mb_structure.module).  
      if (isset($group->gid)) {
        $gid = $group->gid;
      }
      
   }
   else if (isset($view->args[0])) {    // If we're in views ui, we can't get node from path, so get it from views args
      $args = explode(",",$view->args[0]);
      $gid = array_shift( $args );
      $group = og_get_group('group', $gid);  
      $node = (isset($group->etid)) ? node_load($group->etid) : NULL ;
   } 
   else {
     return;
   }
   
   if ( 'collection_media' != $view->name || (!$node  && !in_array($node->type, array('team','collection')))) {
      return;
   }
   
   /* Add extra gids to the where clause to include media in child teams of a collection */
   // Get nodes of the teams for the collection
   $efq = new EntityFieldQuery();
   $result = $efq
   ->entityCondition('entity_type', 'node')
   ->propertyCondition('type', 'team', '=')
   ->fieldCondition('group_audience', 'gid', $gid, '=', 0)
   ->execute();
   
   // Get gids from team nodes
   $gids = array($gid);
   if ( isset($result['node']) ) {
      foreach ($result['node'] as $team_nid => $team_node) {
         $group = og_get_group('node', $team_nid);
         $gids[] = $group->gid;
      }
   }
   // Add gids to where condition
   $view->args[0] = implode(", ",$gids);
   $query->where[0]['conditions'][0]['value'][':og_membership_group'] = $gids;
   
   
}

/** Not sure this is necessary: removing for speed improvement
function mb_structure_node_view($node, $view_mode, $langcode) {
   if ( in_array($node->type, array('audio','video')) && $collection_node = get_collection_ancestor_node($node) ) {
      $path = "node/$collection_node->nid";
      $alias = drupal_get_path_alias($path);
      $link = l($collection_node->title, $alias);
      $node->content['collection_ancestor'] = array(
         '#type' => 'item',
         '#label_display' => 'inline',
         '#markup' => $link,
         '#title' => t('Collection:'),
         );
      $node->content['#group_children']['collection_ancestor'] = 'group_details';
   }
}
*/

/**
 * Add variable has_transcript
 */
function mb_structure_preprocess_html(&$vars) {
	if (function_exists('transcripts_node_has_transcript')) {
		if ($node = menu_get_object()) {
			if (arg(2) == NULL && transcripts_node_has_transcript($node)) {
				$vars['classes_array'][] = 'has-transcript';
			}
		}
	}
}

/**
 * Add variable has_transcript
 */
function mb_structure_preprocess_node(&$vars) {
	// Only do following code if full view mode due to time consuming factor on galleries of multiple nodes
	if($vars['view_mode'] != 'full') { return; }
  // Temporarily accounting for both old and new version of transcripts suite
  // in the end transcripts_node is the new version
  if(module_exists('transcripts_node')) {
		$vars['has_transcript'] = FALSE;
		if (transcripts_node_has_transcript($vars['node'])) {
			$options = array(
				'term' => isset($_GET['term']) ? '"'.$_GET['term'].'"' : '',
		                'justhits' => isset($_GET['justhits']) ? true : false,
	        	);
			$trid = transcripts_apachesolr_already_indexed_trid('transcripts_node', 'node', $vars['node']->nid);
			if ($trid) {
				$ui = transcripts_ui_ui('transcripts_apachesolr', $trid, $options);
	      if ($ui->tcuCount > 0) {
					$vars['trid'] = $trid;
					$vars['has_transcript'] = TRUE;
					$vars = array_merge($vars, transcripts_ui_render($ui));
		   	}
			}
		}
  } elseif (function_exists('transcripts_node_has_transcript')) {
  	$vars['has_transcript'] =  transcripts_node_has_transcript($vars['node']);
  }
}

function mb_structure_node_load($nodes, $types) {
	// Fix problem with kaltura_node_index_update expects lang='en' instead of 'und'
	if(in_array('audio', $types)) {
		foreach($nodes as $node) {
			if($node->type == 'audio' && isset($node->field_audio['und'])) {
				$node->field_audio['en'] = $node->field_audio['und'];
			}
		}
	}
}

function mb_structure_node_update($node) {
	// Separate function to update a node's kaltura data in case it needs to be called from other contexts.
	mb_update_node_kaltura_data($node);
}

/**
 * Impements hook_form_FORM_ID_alter for node delete form to test whether a collection has associated media before deleting
 * Does not allow one to delete a collection if it has content.
 * TODO: add option to delete content as well.
 */
function mb_structure_form_node_delete_confirm_alter(&$form, &$form_state, $form_id){
  $node = $form['#node'];
  if($node->type == "collection" || $node->type == "team") {
    $content_nodes = mb_structure_get_groups_nodes($node->nid);
    $n = count($content_nodes);
    $items = '';
    foreach($content_nodes as $nid) {
      $n2 = node_load($nid);
      $items .= l($n2->title, 'node/' . $nid . '/edit') . ', ';
    }
    $items = substr($items, 0, strlen($items) - 2) . '.';
    if($n > 0) {
      drupal_set_message(t('This group cannot be deleted because it has @n media items associated with it. Please delete or relocate the following items: !items', 
      array('@n' => $n, '!items' => $items)), 'error');
      drupal_goto('node/' . $node->nid . '/edit');
    }
  }
}
   

function mb_update_node_kaltura_data($node) {
	/* 
	 * Use this function to refresh thumbnail and other Kaltura data for the media object, 
	 * If it has a kaltura id, $kid = $node->field_video['und'][0]['entryid'];
	 * Code taked from kaltura_cron() in kaltura.module line 567 
	 * Added code to get kaltura video thumb from function (ndg, 2015-03-19)
	 * 
	 */
	$kid = (isset($node->field_video['und'][0]['entryid'])) ? $node->field_video['und'][0]['entryid'] : NULL;
	if(!empty($kid)) {
		try {
			$result = kaltura_get_entries(array($kid), TRUE);
			if ($result[0] !== FALSE) {
				foreach ($result[0]->objects as $resultObject) {
					$thumb_url = mb_kaltura_get_thumbnail_url($resultObject->id);
					if(empty($thumb_url)) { $thumb_url = $resultObject->thumbnailUrl; }
					$ent['kaltura_entryid'] = $resultObject->id;
					$ent['kaltura_tags'] = $resultObject->tags;
					$ent['kaltura_admin_tags'] = $resultObject->adminTags;
					$ent['kstatus'] = $resultObject->status;
					$ent['kaltura_media_type'] = $resultObject->mediaType;
					$ent['kaltura_duration']= $resultObject->duration;
					$ent['kaltura_thumbnail_url'] = $thumb_url;
					$ent['kaltura_partner_data'] = $resultObject->partnerData;
					$ent['kaltura_source'] = $resultObject->sourceType;
					$ent['kaltura_width'] = $resultObject->width;
					$ent['kaltura_height'] = $resultObject->height;
					$ent['kaltura_download_url'] = $resultObject->downloadUrl;
					$ent['kaltura_views'] = $resultObject->views;
					$ent['kaltura_plays'] = $resultObject->plays;
					$ent['kaltura_votes'] = $resultObject->votes;
					$ent['kaltura_rank'] = $resultObject->rank;
					$ent['kaltura_total_rank'] = $resultObject->totalRank;
					$ent['kaltura_title'] = $resultObject->name;
					$ent['kaltura_description'] = $resultObject->description;
					$wres = drupal_write_record('node_kaltura', $ent, 'kaltura_entryid');
				}
			}
		} 
	    catch (Exception $ex) {
	    	//dpm('Problem');
	    	//dpm($ex);
	    }
	}
}

function get_collection_ancestor_node($node) {
   if(is_integer($node)) {
     $node = node_load($node);
     if(!$node) { return null; }
   }
   $collection_node = null;
   if ( $gids = og_get_entity_groups('node', $node) ) { 
      $gid = array_pop( $gids );
      $parent_group = og_load($gid);
      if ($parent_group->entity_type == 'node') {
         $group_node = node_load($parent_group->etid);
         if ( $group_node->type == 'collection' ) {
            $collection_node=$group_node;
         } else if ( $group_node->type == 'team' ){  //  recurse to get to the collection of a team node
            return get_collection_ancestor_node($group_node); 
         }
      }
   }
   return $collection_node;
}

function mb_structure_is_team_super_user($node) {
   if( $node->type == 'team' && isset($node->group_audience[LANGUAGE_NONE]) && $collection_gids = $node->group_audience[LANGUAGE_NONE]) {
      return og_user_access($collection_gids[0]['gid'], 'administer group');
   }
}

function mb_structure_get_team_gids($collection_gid) {
   $gids = array();
   $query = new EntityFieldQuery();
   $result = $query
	   ->entityCondition('entity_type', 'node')
	   ->propertyCondition('type', 'team')
	   ->fieldCondition('group_audience', 'state', array(1), 'IN', 0)
	   ->fieldCondition('group_audience', 'gid', $collection_gid, '=', 0)
	   ->execute();
	 $teams = array();
	 if (!empty($result['node'])) {
	 		foreach($result['node'] as $nid => $team) {
	 			$node = node_load($nid);
				$team->title = $node->title;
				$team->path = drupal_get_path_alias('node/' . $nid);
				$teams[$nid] = (array)$team;
	 		}
	 }
	 return $teams;
}

function mb_structure_get_collection_gid($team_gid) {
   $group = og_load($team_gid);
   $node = node_load($parent_group->etid);
   $collection_node = get_collection_ancestor_node($node);
   $collection_group = og_get_group('node', $collection_node->nid);
   return $collection_group->gid;
}

function mb_structure_get_groups_for_user( $add_optgroup = TRUE ) {
   $gids_with_labels = array();
   $coll_key = t('Collections');
   $team_key = t('Teams');
   $all_groups = og_get_all_group();
   foreach ($all_groups as $gid) {
      $group = og_get_group('group',$gid);
      $node = node_load($group->etid);
      if ( ! in_array($node->type, array('collection', 'team'))) {
         continue;
      }
      if ( ($node->type == 'team' && mb_structure_is_team_super_user($node))
         ||  (og_is_member($gid, 'user') || og_user_access($gid, 'administer group')) 
      ) {
      $new_key = $node->type == 'collection' ? $coll_key : $team_key;
      if ($add_optgroup) {
         $gids_with_labels[$new_key][$gid] = $group->label;
      }
      else {
         $gids_with_labels[$gid] = $group->label;
      }
      }
   }
   return $gids_with_labels;
}

function mb_structure_already_started_validate(&$form_state, $form) {
	 // this had $element,  as the first parameter but caused an error (ndg, 2014-08-19)
   //dpm(array($form_state, $form), 'form state in started validate');
	 $fobj = (empty($form_state['input'])) ? $form : $form_state; // Travis had form_state but it doesn't have input, form does. Doing this in case there is a situation where form_state does have input
   $gid = $fobj['input']['collection_id'];
   $group = og_get_group('group',$gid);
   $nid = $group->etid;
   $path_format = 'node/add/%s';
   $path = $fobj['clicked_button']['#id'] == 'edit-submit-video' ? sprintf($path_format, 'video') : sprintf($path_format, 'audio');
   drupal_goto($path, array('query' => array('gids_node[]' => $nid)));
}

function mb_structure_menu_breadcrumb_alter(&$active_trail, $item) {
   $new_items=array();
   if ($item['path'] == 'node/%' &&  $node = $item['page_arguments'][0] ) {
      if ( ! in_array($node->type, array('collection', 'team', 'audio', 'video') ) ) {
         return;
      }
      $new_items[] = array( 
         'title' => t('Collections'),
         'href' => 'collections',
         'link_path' => '',
         'localized_options' => array(),
         'type' => 0,
         );
      
      switch ( $node->type ) {
      case 'team': 
         $new_items[] = mb_structure_breadcrumb_items_collection_team($node);
         break;
      case 'audio':
      case 'video':
         $new_items=array_merge($new_items, mb_structure_breadcrumb_items_audio_video($node));
      }
   }
   array_splice( $active_trail, 1, 0, $new_items ); // splice in at position 1
}

function mb_structure_breadcrumb_items_collection_team($node) {
   $coll_group = og_get_group('group', $node->group_audience[LANGUAGE_NONE][0]['gid']);
   $coll_crumb = array( 
      'title' => $coll_group->label,
      'href' => 'node/' . $coll_group->etid,
      'link_path' => '',
      'localized_options' => array(),
      'type' => 0,
      );
   return $coll_crumb;
}

function mb_structure_breadcrumb_items_audio_video($node) {
   $coll_team_group = og_get_group('group', $node->group_audience[LANGUAGE_NONE][0]['gid']);
   if($coll_team_group) {
     $coll_team_node = node_load($coll_team_group->etid); 
     if ($coll_team_node->type == 'team'  ) {
        $coll_crumb = mb_structure_breadcrumb_items_collection_team($coll_team_node);
        $team_crumb = array(
           'title' => $coll_team_node->title,
           'href' => 'node/' . $coll_team_node->nid,
           'link_path' => '',
           'localized_options' => array(),
           'type' => 0,
           );
        if (  mb_structure_is_team_super_user($coll_team_node)
           ||  (og_is_member($coll_team_group->gid, 'user') || og_user_access($coll_team_group->gid, 'administer group'))
        ) {
        return array($coll_crumb, $team_crumb);
        }
        else {
           return array($coll_crumb);         
        }
     }
     else {
        $coll_crumb = array(
           'title' => $coll_team_node->title,
           'href' => 'node/' . $coll_team_node->nid,
           'link_path' => '',
           'localized_options' => array(),
           'type' => 0,
           );
        return array($coll_crumb);
     }
   } else {
     drupal_set_message(t("Node @nid is not part of a collection or team", array('@nid' => $node->nid)), 'warning', FALSE);
     return array();
   }
}

/**
 * Creates a Bootstrap carousel for all collections
 * 
 */
function mb_structure_collections_carousel_block() {
  $nodes = node_load_multiple(array(), array('type' => 'collection'));
  $genimage = drupal_get_path('module', 'mediabase') . '/images/collections-generic.png';
  $slides = array();
	$nids = variable_get('carousel_block_project_ids', '3');
	$nids = explode(',', str_replace(' ','',$nids));
	$nodes = node_load_multiple($nids);
  foreach($nodes as $nid => $node) { // nid = node id, not sequential but node number in Drupal
    $itemcount = $node->child_count;
    // if status = published and viewable by anonymous users then add to carousel
    if($node) {
      // Get Author and Date Info
      $usr = user_load_by_name($node->name);
      $author = $usr->realname;
      if($author == '') {
        $author = $usr->name;
        if($author == '') {
          $author = 'Unknown User';
        }
      }
      $date = date('F Y', $node->created);
      // Get image
      $imgurl = $genimage;
      // use carousel image if it exists
      if(isset($node->field_images['und'][0]['uri'])) {
        $imgurl = image_style_url('carousel_image', $node->field_images['und'][0]['uri']);
      }
      
      // Get Summary
      $settings = array(
          'type' => 'text_summary_or_trimmed',
          'settings'=>array('trim_length' => 700),
          'label' => 'hidden',
       );
       
      $field_view = field_view_field('node', $node, 'body', $settings );
      $summary = render($field_view);
      $itemcount = $node->child_count;
      if($itemcount == 1) {$itemcount .= ' ' . t('item');} else {$itemcount .= ' ' . t('items');}
      $slide = array(
        'nid' => $nid,
        'title' => $node->title,
        'author' => $author,
        'date' => $date,
        'path' => drupal_get_path_alias('node/' . $nid),
        'img' => $imgurl,
        'summary' => $summary,
        'itemcount' => $itemcount,
      );
      $slides[] = $slide;
    }
  }
  $carousel = array(
    'element' => array(
      '#theme' => 'carousel',
      '#children' => '',
      'title' => t('Featured Collections'),
      'link' => l(t('View All Collections'), 'collections'),
      'speed' => variable_get('carousel_block_speed', 8),
      'slides' => $slides,
    ),
  );
  return drupal_render($carousel); 
}

/**
 * Returns list of nids content that are content of a group when given then groups NID
 */
function mb_structure_get_groups_nodes($nid) {
  $nids = array();
  if($g = og_get_group('node', $nid)) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition("entity_type", "og_membership", "=")
      ->propertyCondition("gid", $g->gid, "=");
    $result = $query->execute();
    if(!isset($result["og_membership"]) || !is_array($result["og_membership"])) {return array(); }
    foreach($result["og_membership"] as $record) {
      $m = og_membership_load($record->id);
      if($m->entity_type == "node") {
        $nids[] = $m->etid;
      }
    }
  }
  return $nids;
}

/* For collection list should use render array if needed. This is old code commented out
function mb_structure_collections_list_form() {
  $form = array();
  $nodes = node_load_multiple(array(), array('type' => 'collection'));
  $markup = '
    <div class="btn-group">
    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
      Collections <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" role="menu">
  ';
  foreach($nodes as $n => $node) {
    $path = drupal_get_path_alias('node/' . $node->nid);
    $markup .= '<li><a href="' . url($path) . '">' . $node->title . '</a></li>';
  }
  $markup .= '</ul></div>';
  $form['collections_list'] = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );
  return $form;
}
*/
