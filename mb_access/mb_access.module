<?php

/**
* @file
* Enable access control for UVa community and collection administrators.
*/

/**
* The group_audience field.
*/
define('OG_GROUP_AUDIENCE_FIELD', 'group_audience');

/**
* The access realm of a UVa community member.
*/
define('OG_ACCESS_UVA_MEMBER_REALM', 'group_access_uva_member');

/**
* The access realm of a UVa community member.
*/
define('MB_COLLECTION_ADMIN_REALM', 'mb_collection_admin');

/**
* Define group access UVA regardless of its group definition.
*/
define('OG_ACCESS_UVA', 2);

/**
* Define group public access.
*/
define('OG_ACCESS_PUBLIC', 0);

/**
* Define group content access UVA regardless of its group definition.
*/
define('OG_CONTENT_ACCESS_UVA', 3);

/**
* Implements hook_node_grants().
*/
function mb_access_node_grants($account, $op) {
   $grants = array();
   global $user;
   
   if ($op == 'view' && in_array('authenticated user', $user->roles)) {
      // ADD A GRANT FOR UVA COMMUNITY
      $grants[OG_ACCESS_UVA_MEMBER_REALM][] = DRUPAL_AUTHENTICATED_RID;
   }

   if (in_array($op, array('view', 'update', 'delete')) && in_array('authenticated user', $user->roles)) {
      // ADD GRANTS FOR COLLECTION ADMINS
      // fetch all of the collections
      $query = new EntityFieldQuery();
      $collections = $query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'collection', '=')
      ->execute();
      
      foreach ($collections['node'] as $node) {
         // get the collection group object from the nid
         $group = og_get_group('node', $node->nid);
         if (og_user_access($group->gid, 'administer group') ) {
               $grants[MB_COLLECTION_ADMIN_REALM][] = $group->gid;
         }
      }
   }
   // dd($grants['mb_collection_admin'][0], "mb_collection_admin  grants for $account->uid");
   return $grants;
}


/**
* Implements hook_node_access_records().
*/
function mb_access_node_access_records($node) {
   $uva_grants = add_node_access_records($node);
   $subgroup_grants = add_mb_collection_admin_node_access_records($node);
   $grants = array_merge($uva_grants, $subgroup_grants);
   if ( og_get_group('node',$node->nid ) ) { //
         add_mb_collection_admin_node_access_records_for_audio_video( $node );
   }
   //dd($grants, "node access records");
   return $grants;
}

/**
* Add OG_ACCESS_UVA_MEMBER_REALM records to node_access table
* @todo Add a flag to a team that prompts group admin to re-save group content permissions when paradigm changes.
**/
function add_node_access_records($node) {
   $grants = array();                    
   $add_public_grant = FALSE;
   $add_uva_grant = FALSE;
   // GROUP
   if ( isset($node->{OG_ACCESS_FIELD}) )  { 
      switch ($node->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value']) {
	      case OG_ACCESS_UVA:
	         $add_uva_grant = TRUE;
	         break;
	      case OG_ACCESS_PUBLIC:
	         $add_public_grant = TRUE;
	         break;
      }
   }
   // GROUP CONTENT
   elseif (isset($node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'])) { 
      $content_access = $node->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'];
      // If group content is set to use group defaults, then go to the group to get the visibility
      if ($content_access == OG_CONTENT_ACCESS_DEFAULT) {
         $gid = $node->{OG_GROUP_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'];
         $group = og_get_group('group',$gid);
         $node = node_load( $group->etid);
         // increment group_access value by 1 to get the relevant value for group_content_access
         $content_access = $node->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] + 1;
      }
      switch ($content_access) {
      case OG_CONTENT_ACCESS_PUBLIC:
         $add_public_grant = TRUE;
         break; // Do nothing.
      case OG_CONTENT_ACCESS_PRIVATE:
         break; // Do nothing.
      case OG_CONTENT_ACCESS_UVA:
         $add_uva_grant = TRUE;
         break;
      }
   }
   
   if ($add_public_grant) {
      $grants[] = array (
            'realm' => 'all',
            'gid' => 0,
            'grant_view' => $node->status, // don't allow access to unpublished nodes
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
            );
   }
   if ($add_uva_grant) {
      $grants[] = array (
         'realm' => OG_ACCESS_UVA_MEMBER_REALM,
         'gid' => DRUPAL_AUTHENTICATED_RID,
         'grant_view' => 1,
         'grant_update' => 0,
         'grant_delete' => 0,
         'priority' => 0,
         );
   }
   return $grants;
}

/**
* Here we're adding grants for propagating permissions from a collection down into team objects
* @todo fix the hardcoded 'team' node type hack
**/
function add_mb_collection_admin_node_access_records($node) {
   $grants = array();                    
   $field_language = field_language('node', $node, 'group_audience');
   $collection_gid = NULL;
   // COLLECTION GRANTS
   if ( $node->type == 'team' && isset($node->{OG_GROUP_AUDIENCE_FIELD}[$field_language][0])) { // team has a collection
      $collection_gid = $node->{OG_GROUP_AUDIENCE_FIELD}[$field_language][0]['gid'];
   }
   // AUDIO VIDEO GRANTS
   elseif ( in_array($node->type, array('video', 'audio')) && isset($node->{OG_GROUP_AUDIENCE_FIELD}[$field_language]) ) {  // media item belongs to a team or collection
      $gid = $node->{OG_GROUP_AUDIENCE_FIELD}[$field_language][0]['gid'];      
      $group = og_get_group('group', $gid);
      $node = node_load($group->etid);
      $lang = field_language('node', $node, 'group_audience');
      if ( isset($node->{OG_GROUP_AUDIENCE_FIELD}[$lang]) ) { // team has a collection
         $collection_gid = $node->{OG_GROUP_AUDIENCE_FIELD}[$lang][0]['gid'];
      }
   }
   if ( is_numeric($collection_gid) ) {
      $grants[] = array (
         'realm' => MB_COLLECTION_ADMIN_REALM,
         'gid' => $collection_gid, // gid here is group id not grant id
         'grant_view' => 1,
         'grant_update' => 1,
         'grant_delete' => 1,
         'priority' => 0,
         );
   }
   return $grants;
}

function add_mb_collection_admin_node_access_records_for_audio_video( $node ) {
   $group = og_get_group('node', $node->nid);
   // Select group members that don't yet have the proper grant records
   $sql = "SELECT DISTINCT nid FROM {node}, {field_data_group_audience} 
   WHERE nid = entity_id
   AND group_audience_gid = :gid
   AND nid NOT IN
   ( SELECT nid FROM {node_access} WHERE nid = :nid AND realm = :realm)";
   $res = db_query($sql, array(':nid' => $node->nid, ':gid' => $group->gid, ':realm' => MB_COLLECTION_ADMIN_REALM ) );
   
   // Save the group members to add the grant records
   $nids = $res->fetchCol();
   if ( sizeof($nids) > 100 ) { // too many collection members to update without timing out
      node_access_needs_rebuild(TRUE);
   }
   else {
      foreach ( $nids as $nid) {
         $node = node_load($nid);
         node_access_acquire_grants($node, $delete=TRUE);
      }
   }
}



