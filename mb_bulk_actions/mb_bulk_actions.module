<?php
/**
 * @file
 * Creates bulk actions for use managing Mediabase collections
 *
 * The first such action was to filter subcollection values out of the subject field (field_characteristic)
 * and into their own subcollection field. So, they could each be faceted separately.
 * 
 * Other actions can be added as needed.
 */
 
function mb_bulk_actions_action_info() {
  return array(
    'mb_bulk_actions_filter_subcollection_action' => array(
      'aggregate' => FALSE,
      'type' => 'node',
      'label' => t('Filter subcollection values'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'mb_bulk_actions_assign_subject' => array(
      'aggregate' => FALSE,
      'type' => 'node',
      'label' => t('Tag with Kmaps Subject'),
      'behavior' => array('changes_property'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**** Filter Subcollection Action ******/
function mb_bulk_actions_filter_subcollection_action(&$node, $context) {
  
  // Create node's field_subcollection array if not already there
  if(!isset($node->field_subcollection['und']) || !is_array($node->field_subcollection['und'])) {
    $node->field_subcollection = array(
      'und' => array()
    );
  }
  
  // Get list of TIDs that are collections
  $colltids = array();
  foreach($node->field_characteristic['und'] as $ind => $item) {
    $tid = $item['tid'];
    if(_is_collection($tid)) {
      array_push($colltids, $tid);
    }
  }
  
  // for each collection tid, remove it from field_characteristic and put it in field_subcollection
  foreach($colltids as $tid) {
    // Remove from field_characteristic
    $fcind = _find_tid_in_field($node->field_characteristic['und'], $tid);
    if($fcind !== FALSE) {
      unset($node->field_characteristic['und'][$fcind]);
      array_values($node->field_characteristic['und']);
    } else {
      drupal_set_message(t('Mb Bulk Filter Subcollection: Not finding TID (@TID) in field_characteristic (@FCIND) when it should be there!', 
        array( '@TID' => $tid, '@FCIND' => $fcind)), 'warning');
    }
    
    // Put Tid in field_subcollection if not already there
    if(count($node->field_subcollection) == 0) {
      $node->field_subcollection = array(
        'und' => array()
      );
    }
    if(_find_tid_in_field($node->field_subcollection['und'], $tid) === FALSE) {
      array_push($node->field_subcollection['und'], array( 'tid' => "$tid" ));
    }
  }
}

function _is_Collection($tid) {
  $term = taxonomy_term_load($tid);
  $kmid = $term->kmap_id['und'][0]['value'];
  $apiroot =  variable_get('kmap_server', 'http://subjects.kmaps.virginia.edu');
  $url = $apiroot . 'features/' . $kmid .  '.xml';
  try { 
    if($xml = file_get_contents($url)) { 
      $doc = new DOMDocument();
      $doc->loadXML($xml);
      $xpath = new DOMXpath($doc);
      $elements = $xpath->query('//ancestors/feature[@id="2823"]'); // id 2823 is the root Collections Kmap ID
      if($elements->length > 0) {
        return TRUE;
      }
    }
  } catch (Exception $e) {
    drupal_set_message("Exception thrown getting kmap info: " . $e->getMessage());
  }
  return FALSE;
}

function _find_tid_in_field($field_array, $tid) {
  foreach ($field_array as $ind => $item) {
    if($item['tid'] == $tid) { return $ind; }
  }
  return FALSE;
}

/**** End of Filter Subcollection Action ******/

/**** Assign Kmaps Subject *******/

// Form Functions to get KMap Subject ID
function mb_bulk_actions_assign_subject_views_bulk_operations_form($options) {
  $form = array();
  $form['kid'] = array(
    '#type' => 'textfield', 
    '#title' => t('Enter the numeric Kmaps Subject ID'),
    '#default_value' => !empty($options['kid']) ? $options['kid'] : '',
  );
  return $form;
}

function mb_bulk_actions_assign_subject_form($settings, &$form_state) {
  $form = array();
  $form['kid'] = array(
    '#type' => 'textfield', 
    '#title' => t('Enter the numeric Kmaps Subject ID'),
    '#required' => TRUE,
    '#default_value' => isset($settings['settings']['kid']) ? $settings['settings']['kid'] : '',
  );
  return $form;
}

// TODO: Add a validation function?

function mb_bulk_actions_assign_subject_submit($form, $form_state) {
  $return = array();
  $return['kid'] = $form_state['values']['kid'];
  return $return;
}

// Function to assign subject kmap tag
function mb_bulk_actions_assign_subject(&$node, $context) {
	//dpm($context, 'context in assign subject');
	try {
		$kmo = new Kmap($context['kid']);
		$tm = $kmo->get_term();
		$ew = entity_metadata_wrapper('node', $node);
		$fc = $ew->field_characteristic->value();
		foreach($fc as $n => $fctm) {
			if($fctm->tid == $tm->tid) {
				 watchdog('mb_bulk_action', "Node {$node->nid} already has term '{$tm->name}'");
				 return; 
			}
		}
		$ew->field_characteristic[] = $tm->tid;
		$ew->save();
	} catch (Exception $e) {
		watchdog('mb_bulk_action', "No field_characteristic in node: " . $node->nid . " ({$e->getMessage()})");
	}
}

/**** End Assign Kmaps Subject *****/
